{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"2022\u5e74\u6625 \u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u4f53\u7cfb\u7ed3\u6784\u8363\u8a89\u8bfe \u5b9e\u9a8c\u8bfe\u7f51\u7ad9\u3002 \u5b9e\u9a8c\u8bfe\u65f6\u95f4\uff1a\u6bcf\u5468\u4e00\uff0c8:00-9:40a.m. GitHub \u4ed3\u5e93\uff1a Arch-2022Spring-FDU \u7b54\u7591\u5e73\u53f0\uff1a FDUCSLG Slack \uff0c#sig-architecture\uff1b\u5fae\u4fe1\u7fa4","title":"\u8bfe\u7a0b\u5927\u7eb2"},{"location":"labs/","text":"\u6d4b\u8bd5 \u00b6 1. test1 \u00b6 lab1\u53ea\u5b9e\u73b0\u7b80\u5316\u7684riscv\u6307\u4ee4\u96c6\u3002 lab1\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e3a test-1a \u548c test-1 \uff0c\u4e24\u8005\u8981\u6c42\u7684\u6307\u4ee4\u5982\u4e0b test-1a test-1 LUI JAL BEQ SD LD ADDI XORI ORI ANDI ADD test-1a\u7684\u6240\u6709\u6307\u4ee4 AUIPC JALR SUB XOR OR AND 2. rv64i \u00b6 lab2\u5b9e\u73b0\u5b8c\u6574\u7684rv64i\u6307\u4ee4\u96c6\uff0c\u9664\u4e86ECALL\u3001FENCE\u7b49\u7279\u6b8a\u6307\u4ee4\u3002\u5177\u4f53\u7684\u6307\u4ee4\u5217\u8868\u5982\u4e0b rv64i ( test-1\u4e2d\u5df2\u5b9e\u73b0 ) \u7565 ( \u65b0\u589e ) BNE BLT BGE BLTU BGEU SLTI SLTIU SLLI SRLI SRAI SLL SLT SLTU SRL SRA LB LH LW LBU LHU LWU SB SH SW ADDIW SLLIW SRLIW SRAIW ADDW SUBW SLLW SRLW SRAW lab2\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e3a all-test-rv64i \u3002 \u5728verilator\u4eff\u771f\u65f6\uff0c\u8fd0\u884c\u65b9\u5f0f\u4e3a make test-lab2 TEST=test \uff0c\u5176\u4e2d test \u4e3a\u9009\u62e9\u8fd0\u884c\u7684\u6d4b\u8bd5\u3002\u5728\u4e0a\u677f\u65f6\uff0c\u5219\u4f7f\u7528\u62e8\u7801\u5f00\u5173\u8868\u793a\u9009\u62e9\u8fd0\u884c\u7684\u6d4b\u8bd5\u3002\u6d4b\u8bd5\u7684\u5177\u4f53\u8bf4\u660e\u5982\u4e0b test \u62e8\u7801\u5f00\u5173* \u9884\u671f\u6307\u4ee4\u6570 \u9884\u671f\u8f93\u51fa paint 001 ~4.4e6 \u8f93\u51faDone! Result:\uff0c\u540e\u9762\u7684\u5185\u5bb9\u662f\u4e00\u5f20\u56fe\u7247\u7684base64\u7f16\u7801\uff0c\u5e94\u8be5\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\uff08\u5305\u542b\u5f00\u5934\u7684data:\uff09\u590d\u5236\u5230\u6d4f\u89c8\u5668\u7684\u5730\u5740\u680f\u6253\u5f00\u3002\u5982\u679c\u4f60\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u76f4\u63a5\u6253\u5f00base64\u7f16\u7801\u7684\u56fe\u7247\uff0c\u8bf7\u5c1d\u8bd5\u5728\u767e\u5ea6\u4e0a\u627e\u4e00\u4e2abase64\u8f6c\u56fe\u7247\u7684\u5de5\u5177\uff0c\u5982 \u8fd9\u4e2a \u3002\u8f93\u51fa\u7684\u56fe\u7247\u5e94\u8be5\u662f\u4e00\u4e2a\u4f60\u5f88\u719f\u6089\u7684\u4e8b\u7269\uff0c\u5e76\u4e14\u6ca1\u6709\u660e\u663e\u7684\u53d8\u5f62\u548c\u566a\u70b9\u3002\u56fe\u7247\u7684\u5de6\u4e0a\u89d2\u6709\u4e00\u884c\u6570\u5b57\uff0c\u8868\u793acpu\u7ed8\u5236\u8fd9\u5f20\u56fe\u6240\u753b\u7684\u6beb\u79d2\u6570**\u3002 coremark 010 ~4.0e6 \u8f93\u51faFinised in xxxms.\u8868\u793acpu\u8fd0\u884ccoremark\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u65f6\u95f4\uff08Finised\u662f\u539f\u7a0b\u5e8f\u4e2d\u5c31\u6709\u7684typo\uff09\u3002\u5728\u7b54\u6848\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u4f1a\u8f93\u51faCoreMark Iterations/Sec\uff0c\u8868\u793acpu\u5728\u4e00\u79d2\u5185\u6267\u884ccoremark\u5faa\u73af\u7684\u6b21\u6570\uff0c\u5206\u6570\u8d8a\u9ad8\u8bf4\u660ecpu\u6027\u80fd\u8d8a\u597d\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700\u7684\u5206\u6570\u7ea6\u4e3a2e4 Iter/Sec***\u3002 dhrystone 011 ~4.8e6 \u8f93\u51faDhrystone PASS\uff08\u5982\u679c\u662fFAIL\uff0c\u90a3\u4e48\u8bf4\u660e\u7b54\u6848\u9519\u8bef\uff0c\u6240\u7ed9\u5f97\u5206\u6ca1\u6709\u610f\u4e49\uff09\uff0c\u5e76\u7ed9\u51facpu\u7684\u5f97\u5206\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700k\u7684\u5206\u6570\u7ea6\u4e3a1e5***\u3002 stream 100 ~8.5e6 \u8f93\u51fa\u5bf9cpu\u8bbf\u5b58\u901f\u5ea6\u7684\u6d4b\u8bd5\u7ed3\u679c\uff0c\u4e14\u540e\u9762\u5e94\u6709avg error less than 1.000000e-13 on all three arrays\uff08\u8868\u793a\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u672a\u51fa\u73b0\u9519\u8bef\uff09\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u6ca1\u6709\u5b98\u65b9\u7684\u53c2\u8003\u5206\u6570\uff0c\u6211\u4eec\u53ea\u63d0\u4f9bi7\u7684copy\u901f\u5ea6\u4f9b\u53c2\u8003\uff1aL1 cache ~ 500GB/s; L2&3 cache ~ 100GB/s; Memory ~ 25GB/s\u3002stream\u662f\u7ebf\u6027\u6267\u884c\u7684\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba4\u4e3acopy\u901f\u5ea6\u4e0eL1 cache\u63a5\u8fd1\u3002 conwaygame 101 ~9.9e6 \u8f93\u51fa\u5143\u80de\u81ea\u52a8\u673a\uff08conway\u751f\u547d\u6e38\u620f\uff09\u7684\u6f14\u5316\u7ed3\u679c\u3002\u6f14\u5316\u7ed3\u679c\u4e0e\u968f\u673a\u6570\u79cd\u5b50\u6709\u5173\uff0c\u6ca1\u6709\u6807\u51c6\u7b54\u6848\uff0c\u4f46\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5e94\u662f\u770b\u4e0a\u53bb\u6bd4\u8f83\u89c4\u5219\u7684\u56fe\u5f62\u3002 \uff08\u52a9\u6559\u53ef\u80fd\u4f1a\u6839\u636e\u968f\u673a\u6570\u79cd\u5b50\u590d\u6838\uff09 all 000 ~3.2e7 \u4f9d\u6b21\u6267\u884c\u4e0a\u9762\u4e94\u4e2a\u6d4b\u8bd5\u3002 *\uff1a\u7528SW[2:0]\u8868\u793a\uff0c\u5982100\u5c31\u662f\u5c06\u62e8\u7801\u5f00\u5173SW2\u6253\u5f00\uff0cSW0\u548c1\u5173\u95ed\u3002 **\uff1a\u8868\u683c\u53ca\u6ce8\u91ca\u4e2d\u63d0\u53ca\u7684\u6240\u6709\u65f6\u95f4\u5747\u4ee5cpu\u65f6\u949f\u4e3a\u51c6\uff0c\u4eff\u771f\u65f6\u4f1a\u4e0e\u771f\u5b9e\u65f6\u95f4\u4e0d\u4e00\u81f4\u3002\u53d7\u4e32\u53e3\u7684\u8f93\u51fa\u901f\u7387\u8f83\u6162\u5f71\u54cd\uff0c\u4e0a\u677f\u65f6\u95f4\u591a\u4e8e\u4eff\u771f\u65f6\u95f4\u662f\u6b63\u5e38\u73b0\u8c61\u3002 ***\uff1ai7-7700\u7684\u65f6\u949f\u9891\u7387\u4e3a3.6GHz\uff0ci7-7700k\u7684\u65f6\u949f\u9891\u7387\u4e3a4.2GHz\uff0clab\u4e2d\u4f7f\u7528\u7684\u65f6\u949f\u9891\u7387\u4e3a25MHz\u3002\u53ef\u4ee5\u7528\u5206\u6570\u9664\u4ee5\u65f6\u949f\u9891\u7387\u6765\u8bc4\u4f30\u4ec5\u8003\u8651\u6d41\u6c34\u7ebf\u67b6\u6784\u65f6\u7684\u6027\u80fd\u5dee\u5f02\u3002 3. rv64im (draft) \u00b6 lab3\u5b9e\u73b0rv64m\u6269\u5c55\u6307\u4ee4\u96c6\u4e2d\u7684\u90e8\u5206\u5e38\u7528\u6307\u4ee4\u3002\u5177\u4f53\u7684\u6307\u4ee4\u5217\u8868\u5982\u4e0b rv64im ( rv64i\u4e2d\u5df2\u5b9e\u73b0 ) \u7565 ( \u65b0\u589e ) MUL DIV DIVU REM REMU MULW DIVW DIVUW REMW REMUW lab3\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e3aall-test-rv64im\uff0c\u901a\u8fc7make test-lab3\u8fd0\u884c\uff0c\u5177\u4f53\u4f7f\u7528\u65b9\u5f0f\u4e0elab2\u76f8\u540c\u3002 lab3\u5c06\u4f1a\u5bf9\u4f60\u7684cpu\u63d0\u51fa\u4e00\u4e9b\u6027\u80fd\u8981\u6c42\uff0c\u5177\u4f53\u8981\u6c42\u5f85\u5b9a\u3002 4. sys (draft) \u00b6 lab4\u5f85\u53d1\u5e03\u3002","title":"labs\u6982\u8981"},{"location":"labs/#_1","text":"","title":"\u6d4b\u8bd5"},{"location":"labs/#1-test1","text":"lab1\u53ea\u5b9e\u73b0\u7b80\u5316\u7684riscv\u6307\u4ee4\u96c6\u3002 lab1\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e3a test-1a \u548c test-1 \uff0c\u4e24\u8005\u8981\u6c42\u7684\u6307\u4ee4\u5982\u4e0b test-1a test-1 LUI JAL BEQ SD LD ADDI XORI ORI ANDI ADD test-1a\u7684\u6240\u6709\u6307\u4ee4 AUIPC JALR SUB XOR OR AND","title":"1. test1"},{"location":"labs/#2-rv64i","text":"lab2\u5b9e\u73b0\u5b8c\u6574\u7684rv64i\u6307\u4ee4\u96c6\uff0c\u9664\u4e86ECALL\u3001FENCE\u7b49\u7279\u6b8a\u6307\u4ee4\u3002\u5177\u4f53\u7684\u6307\u4ee4\u5217\u8868\u5982\u4e0b rv64i ( test-1\u4e2d\u5df2\u5b9e\u73b0 ) \u7565 ( \u65b0\u589e ) BNE BLT BGE BLTU BGEU SLTI SLTIU SLLI SRLI SRAI SLL SLT SLTU SRL SRA LB LH LW LBU LHU LWU SB SH SW ADDIW SLLIW SRLIW SRAIW ADDW SUBW SLLW SRLW SRAW lab2\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e3a all-test-rv64i \u3002 \u5728verilator\u4eff\u771f\u65f6\uff0c\u8fd0\u884c\u65b9\u5f0f\u4e3a make test-lab2 TEST=test \uff0c\u5176\u4e2d test \u4e3a\u9009\u62e9\u8fd0\u884c\u7684\u6d4b\u8bd5\u3002\u5728\u4e0a\u677f\u65f6\uff0c\u5219\u4f7f\u7528\u62e8\u7801\u5f00\u5173\u8868\u793a\u9009\u62e9\u8fd0\u884c\u7684\u6d4b\u8bd5\u3002\u6d4b\u8bd5\u7684\u5177\u4f53\u8bf4\u660e\u5982\u4e0b test \u62e8\u7801\u5f00\u5173* \u9884\u671f\u6307\u4ee4\u6570 \u9884\u671f\u8f93\u51fa paint 001 ~4.4e6 \u8f93\u51faDone! Result:\uff0c\u540e\u9762\u7684\u5185\u5bb9\u662f\u4e00\u5f20\u56fe\u7247\u7684base64\u7f16\u7801\uff0c\u5e94\u8be5\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\uff08\u5305\u542b\u5f00\u5934\u7684data:\uff09\u590d\u5236\u5230\u6d4f\u89c8\u5668\u7684\u5730\u5740\u680f\u6253\u5f00\u3002\u5982\u679c\u4f60\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u76f4\u63a5\u6253\u5f00base64\u7f16\u7801\u7684\u56fe\u7247\uff0c\u8bf7\u5c1d\u8bd5\u5728\u767e\u5ea6\u4e0a\u627e\u4e00\u4e2abase64\u8f6c\u56fe\u7247\u7684\u5de5\u5177\uff0c\u5982 \u8fd9\u4e2a \u3002\u8f93\u51fa\u7684\u56fe\u7247\u5e94\u8be5\u662f\u4e00\u4e2a\u4f60\u5f88\u719f\u6089\u7684\u4e8b\u7269\uff0c\u5e76\u4e14\u6ca1\u6709\u660e\u663e\u7684\u53d8\u5f62\u548c\u566a\u70b9\u3002\u56fe\u7247\u7684\u5de6\u4e0a\u89d2\u6709\u4e00\u884c\u6570\u5b57\uff0c\u8868\u793acpu\u7ed8\u5236\u8fd9\u5f20\u56fe\u6240\u753b\u7684\u6beb\u79d2\u6570**\u3002 coremark 010 ~4.0e6 \u8f93\u51faFinised in xxxms.\u8868\u793acpu\u8fd0\u884ccoremark\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u65f6\u95f4\uff08Finised\u662f\u539f\u7a0b\u5e8f\u4e2d\u5c31\u6709\u7684typo\uff09\u3002\u5728\u7b54\u6848\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u4f1a\u8f93\u51faCoreMark Iterations/Sec\uff0c\u8868\u793acpu\u5728\u4e00\u79d2\u5185\u6267\u884ccoremark\u5faa\u73af\u7684\u6b21\u6570\uff0c\u5206\u6570\u8d8a\u9ad8\u8bf4\u660ecpu\u6027\u80fd\u8d8a\u597d\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700\u7684\u5206\u6570\u7ea6\u4e3a2e4 Iter/Sec***\u3002 dhrystone 011 ~4.8e6 \u8f93\u51faDhrystone PASS\uff08\u5982\u679c\u662fFAIL\uff0c\u90a3\u4e48\u8bf4\u660e\u7b54\u6848\u9519\u8bef\uff0c\u6240\u7ed9\u5f97\u5206\u6ca1\u6709\u610f\u4e49\uff09\uff0c\u5e76\u7ed9\u51facpu\u7684\u5f97\u5206\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700k\u7684\u5206\u6570\u7ea6\u4e3a1e5***\u3002 stream 100 ~8.5e6 \u8f93\u51fa\u5bf9cpu\u8bbf\u5b58\u901f\u5ea6\u7684\u6d4b\u8bd5\u7ed3\u679c\uff0c\u4e14\u540e\u9762\u5e94\u6709avg error less than 1.000000e-13 on all three arrays\uff08\u8868\u793a\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u672a\u51fa\u73b0\u9519\u8bef\uff09\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u6ca1\u6709\u5b98\u65b9\u7684\u53c2\u8003\u5206\u6570\uff0c\u6211\u4eec\u53ea\u63d0\u4f9bi7\u7684copy\u901f\u5ea6\u4f9b\u53c2\u8003\uff1aL1 cache ~ 500GB/s; L2&3 cache ~ 100GB/s; Memory ~ 25GB/s\u3002stream\u662f\u7ebf\u6027\u6267\u884c\u7684\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba4\u4e3acopy\u901f\u5ea6\u4e0eL1 cache\u63a5\u8fd1\u3002 conwaygame 101 ~9.9e6 \u8f93\u51fa\u5143\u80de\u81ea\u52a8\u673a\uff08conway\u751f\u547d\u6e38\u620f\uff09\u7684\u6f14\u5316\u7ed3\u679c\u3002\u6f14\u5316\u7ed3\u679c\u4e0e\u968f\u673a\u6570\u79cd\u5b50\u6709\u5173\uff0c\u6ca1\u6709\u6807\u51c6\u7b54\u6848\uff0c\u4f46\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5e94\u662f\u770b\u4e0a\u53bb\u6bd4\u8f83\u89c4\u5219\u7684\u56fe\u5f62\u3002 \uff08\u52a9\u6559\u53ef\u80fd\u4f1a\u6839\u636e\u968f\u673a\u6570\u79cd\u5b50\u590d\u6838\uff09 all 000 ~3.2e7 \u4f9d\u6b21\u6267\u884c\u4e0a\u9762\u4e94\u4e2a\u6d4b\u8bd5\u3002 *\uff1a\u7528SW[2:0]\u8868\u793a\uff0c\u5982100\u5c31\u662f\u5c06\u62e8\u7801\u5f00\u5173SW2\u6253\u5f00\uff0cSW0\u548c1\u5173\u95ed\u3002 **\uff1a\u8868\u683c\u53ca\u6ce8\u91ca\u4e2d\u63d0\u53ca\u7684\u6240\u6709\u65f6\u95f4\u5747\u4ee5cpu\u65f6\u949f\u4e3a\u51c6\uff0c\u4eff\u771f\u65f6\u4f1a\u4e0e\u771f\u5b9e\u65f6\u95f4\u4e0d\u4e00\u81f4\u3002\u53d7\u4e32\u53e3\u7684\u8f93\u51fa\u901f\u7387\u8f83\u6162\u5f71\u54cd\uff0c\u4e0a\u677f\u65f6\u95f4\u591a\u4e8e\u4eff\u771f\u65f6\u95f4\u662f\u6b63\u5e38\u73b0\u8c61\u3002 ***\uff1ai7-7700\u7684\u65f6\u949f\u9891\u7387\u4e3a3.6GHz\uff0ci7-7700k\u7684\u65f6\u949f\u9891\u7387\u4e3a4.2GHz\uff0clab\u4e2d\u4f7f\u7528\u7684\u65f6\u949f\u9891\u7387\u4e3a25MHz\u3002\u53ef\u4ee5\u7528\u5206\u6570\u9664\u4ee5\u65f6\u949f\u9891\u7387\u6765\u8bc4\u4f30\u4ec5\u8003\u8651\u6d41\u6c34\u7ebf\u67b6\u6784\u65f6\u7684\u6027\u80fd\u5dee\u5f02\u3002","title":"2. rv64i"},{"location":"labs/#3-rv64im-draft","text":"lab3\u5b9e\u73b0rv64m\u6269\u5c55\u6307\u4ee4\u96c6\u4e2d\u7684\u90e8\u5206\u5e38\u7528\u6307\u4ee4\u3002\u5177\u4f53\u7684\u6307\u4ee4\u5217\u8868\u5982\u4e0b rv64im ( rv64i\u4e2d\u5df2\u5b9e\u73b0 ) \u7565 ( \u65b0\u589e ) MUL DIV DIVU REM REMU MULW DIVW DIVUW REMW REMUW lab3\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e3aall-test-rv64im\uff0c\u901a\u8fc7make test-lab3\u8fd0\u884c\uff0c\u5177\u4f53\u4f7f\u7528\u65b9\u5f0f\u4e0elab2\u76f8\u540c\u3002 lab3\u5c06\u4f1a\u5bf9\u4f60\u7684cpu\u63d0\u51fa\u4e00\u4e9b\u6027\u80fd\u8981\u6c42\uff0c\u5177\u4f53\u8981\u6c42\u5f85\u5b9a\u3002","title":"3. rv64im (draft)"},{"location":"labs/#4-sys-draft","text":"lab4\u5f85\u53d1\u5e03\u3002","title":"4. sys (draft)"},{"location":"%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/","text":"RISC-V \u67b6\u6784 \u00b6 \u4e2d\u6587\u624b\u518c\uff1a RISC-V-Reader-Chinese-v2p1.pdf The RISC-V Instruction Set Manual Volume I: Unprivileged ISA The RISC-V Instruction Set Manual Volume II: Privileged Architecture Vivado 2018.3 \u00b6 \u4e0b\u8f7d\u597d\u540e\u653e\u5230 Download \u91cc\uff0c\u8fd0\u884c\u5b98\u7f51\u4e0a\u7684\u5b89\u88c5\u5305\u5373\u53ef Windows: https://space.dingtalk.com/s/gwHOA4wz4wLOQ5TVLAPaACBmOWIxM2Q2NzIyNjg0NDBmOWU5OWFkMGI3ZmI1Zjg1Mw \u63d0\u53d6\u7801: dQ42 Linux: https://space.dingtalk.com/s/gwHOA4oqjgLOQ5TVLAPaACA0YTg4ZDE2ZjZkMzQ0OTM0ODAxNTAwNmIzZDYxYjFhNw \u63d0\u53d6\u7801: bAt7","title":"\u53c2\u8003\u8d44\u6599"},{"location":"%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/#risc-v","text":"\u4e2d\u6587\u624b\u518c\uff1a RISC-V-Reader-Chinese-v2p1.pdf The RISC-V Instruction Set Manual Volume I: Unprivileged ISA The RISC-V Instruction Set Manual Volume II: Privileged Architecture","title":"RISC-V \u67b6\u6784"},{"location":"%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/#vivado-20183","text":"\u4e0b\u8f7d\u597d\u540e\u653e\u5230 Download \u91cc\uff0c\u8fd0\u884c\u5b98\u7f51\u4e0a\u7684\u5b89\u88c5\u5305\u5373\u53ef Windows: https://space.dingtalk.com/s/gwHOA4wz4wLOQ5TVLAPaACBmOWIxM2Q2NzIyNjg0NDBmOWU5OWFkMGI3ZmI1Zjg1Mw \u63d0\u53d6\u7801: dQ42 Linux: https://space.dingtalk.com/s/gwHOA4oqjgLOQ5TVLAPaACA0YTg4ZDE2ZjZkMzQ0OTM0ODAxNTAwNmIzZDYxYjFhNw \u63d0\u53d6\u7801: bAt7","title":"Vivado 2018.3"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/","text":"\u5b9e\u9a8c\u6d4b\u8bd5\u65b9\u6cd5 \u00b6 \u9996\u5148\uff0c\u4e0b\u8f7d\u4ee3\u7801\u4ed3\u5e93\u7684 master \u5206\u652f\uff1a cd 2022Spring/ # \u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u76ee\u5f55 git clone -b master https://github.com/FDUCSLG/Arch-2022Spring-FDU.git #\u4e0b\u8f7d\u4ed3\u5e93\u7684master\u5206\u652f cd Arch-2022Spring-FDU git submodule update --init --recursive make test-lab1 #\u6d4b\u8bd5 \u4ee3\u7801\u7f16\u5199 \u00b6 \u6211\u4eec\u5728 vsrc \u91cc\u5199 SystemVerilog \u4ee3\u7801\u3002 \u6709\u4ee5\u4e0b\u8981\u6c42\uff1a \u6bcf\u4e2a .sv \u6587\u4ef6\u4ec5\u7f16\u5199\u4e00\u4e2a module \u6587\u4ef6\u540d\u4e0e module \u540d\u4e00\u81f4\uff0c\u4e00\u822c\u4e3a\u5168\u5c0f\u5199 \u6bcf\u4e2a\u6587\u4ef6\u90fd\u8981\u7528 ifndef __NAME_SV \u6765\u4fdd\u62a4 \u6bcf\u4e2a\u6587\u4ef6\u90fd\u8981\u6709\uff1a `ifdef VERILATOR `else `endif verilator \u4eff\u771f\u4e2d\uff0cmodule \u8fdb\u884c\u5143\u4ef6\u4f8b\u5316\u524d\uff0c\u9700\u8981\u4ee5vsrc/ \u4e3a\u6839\u7684\u76f8\u5bf9\u8def\u5f84 include \u6e90\u6587\u4ef6\uff0c\u5199\u5728`ifdef VERILATOR \u533a\u57df\u3002 vivado \u4e2d\uff0c\u53ea\u9700 include \u5934\u6587\u4ef6\uff0cinclude \u65f6\u4e0d\u5199\u8def\u5f84\uff0c\u53ea\u5199\u6587\u4ef6\u540d.svh \u3002 module \u7684\u4e00\u822c\u5f62\u5f0f\uff1a module sample import common ::* ; #( parameter XLEN = 16 ) ( input logic clk , reset ); endmodule Verilator \u4eff\u771f \u00b6 \u8fd9\u662f\u6211\u4eec\u4e3b\u8981\u7684\u8c03\u8bd5\u624b\u6bb5\u3002 \u8fd0\u884c make test-lab1 \u7b49\u6d4b\u8bd5\uff0c\u89c2\u5bdf\u8f93\u51fa\u3002\u5982\u679c\u6709 Hit Good Trap \u8f93\u51fa\u5219\u4e3a\u901a\u8fc7\u3002 Vivado \u4eff\u771f \u00b6 \u8bf7\u5728 Verilator \u4eff\u771f\u901a\u8fc7\u540e\u518d\u5c1d\u8bd5 Vivado \u4eff\u771f\u3002 \u4f7f\u7528 Vivado2018.3 \u6253\u5f00 vivado/test1/project/project_1.xpr \uff0c\u70b9\u51fb tools \u4e0b\u7684Run Tcl Script \u8fd0\u884c vsrc/add_sources.tcl \u548c vivado/src/add_source.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\uff0c\u7136\u540e Run Simulation \u3002\u70b9\u51fb\u4e0a\u65b9\u4e09\u89d2\u5f00\u59cb\u4eff\u771f\u3002 Vivado \u4e0a\u677f \u00b6 \u8bf7\u81f3\u5c11\u5728 Verilator \u4eff\u771f\u901a\u8fc7\u540e\u518d\u5c1d\u8bd5\u4e0a\u677f\u3002 \u70b9\u51fb Generate Bitstream \uff0c\u751f\u6210\u5b8c\u6bd5\u540e\u8fde\u63a5\u5b9e\u9a8c\u677f\u5e76 Program Device \u3002 \u5728\u7535\u8111\u4e0a\u6253\u5f00\u4e32\u53e3\u8f6f\u4ef6 \uff08 Windows \u7cfb\u7edf\u53ef\u4f7f\u7528 elearning \u4e0a\u53d1\u7684 SecureCRT\uff0c\u5176\u4ed6\u7cfb\u7edf\u8bf7\u81ea\u884c\u5bfb\u627e\u76f8\u5173\u8f6f\u4ef6\uff09\uff0c\u8bbe\u7f6e\u4e32\u53e3\uff08Serial\uff09\u6ce2\u7279\u7387\uff08Baud Rate\uff099600\uff0c\u7136\u540e\u8fde\u63a5\u3002 \u6309\u4e0b\u5b9e\u9a8c\u677f\u4e0a\u7684 prog \uff0c\u53ef\u5728\u4e32\u53e3\u8f6f\u4ef6\u4e2d\u770b\u5230\u4e00\u884c\u8f93\u51fa\uff1a BASYS3 GPIO/UART DEMO! \u8fd9\u662f\u5185\u7f6e\u7684 bitstream \u7684\u8f93\u51fa\uff0c\u4e0d\u662f\u6211\u4eec CPU \u7684\u8f93\u51fa\u3002\u70b9\u51fb Program Device \u624d\u662f\u6211\u4eec CPU \u7684\u8f93\u51fa\u3002 \u5b9e\u9a8c\u6d4b\u8bd5\u4ecb\u7ecd \u00b6 CPU \u8bbf\u5b58\u63a5\u53e3 \u00b6 \u6d41\u6c34\u7ebf\u90e8\u5206\u6709\u6307\u4ee4\u5185\u5b58\u63a5\u53e3\u4e0e\u6570\u636e\u5185\u5b58\u63a5\u53e3\uff0cCPU\u4e0e\u5185\u5b58\u7684\u4ea4\u4e92**\u53ea\u9700\u8981**\u8fd9\u4e24\u4e2a\u63a5\u53e3\uff0c\u5b9a\u4e49\u5728 include/common.sv ; \u5b9e\u73b0\u5728 core.sv \u7684 input \u548c output \u63a5\u53e3 \u6307\u4ee4\u5185\u5b58\u63a5\u53e3\uff1a typedef struct packed { logic valid ; // in request? (Used in Lab 2) addr_t addr ; // target address } ibus_req_t ; typedef struct packed { logic addr_ok ; // is the address accepted by cache? (Used in Lab 2) logic data_ok ; // is the field \"data\" valid? (Used in Lab 2) u32 data ; // the data read from cache } ibus_resp_t ; \u6570\u636e\u5185\u5b58\u63a5\u53e3\uff1a typedef struct packed { logic valid ; // in request? addr_t addr ; // target address msize_t size ; // number of bytes (Used in Lab 2) strobe_t strobe ; // which bytes are enabled? set to zeros for read request (in Lab 1, it is either '0(0x0) or '1(0xff)) word_t data ; // the data to write } dbus_req_t ; typedef struct packed { logic addr_ok ; // is the address accepted by cache? (Used in Lab 2) logic data_ok ; // is the field \"data\" valid? (Used in Lab 2) word_t data ; // the data read from cache } dbus_resp_t ; include\u4e0eimport \u00b6 \u5bf9\u4e8everilator\uff0c\u5f15\u7528\u5176\u5b83\u6587\u4ef6\u5b9a\u4e49\u7684\u7ed3\u6784\u6216\u662f\u6a21\u5757\u90fd\u9700\u8981\u8fdb\u884c include `ifdef VERILATOR `include \"\u6587\u4ef6\u76f8\u5bf9\u4e8evsrc\u7684\u8def\u5f84\" `else `endif \u6bd4\u5982\u5728 core.sv \u4e2d\uff0c\u4e0d\u4ec5\u4f7f\u7528\u5230\u4e86\u5b9a\u4e49\u5728 common.sv \u4e2d\u7684 ibus \u548c dbus \uff0c\u5982\u679c\u4e5f\u7528\u5230\u4e86 regfile.sv \u4e2d\u5b9a\u4e49\u7684 regfile \u6a21\u5757\uff0c\u90a3\u4e48**\u90fd\u9700\u8981**\u8fdb\u884c include \uff1a `ifdef VERILATOR `include \"include/common.sv\" `include \"pipeline/regfile/regfile.sv\" `else `endif \u800c\u5bf9\u4e8evivado\uff0c\u4e3a\u4e86\u5f15\u7528\u5176\u5b83\u7ed3\u6784\uff0c\u9700\u8981\u5728\u6bcf\u4e2a\u6a21\u5757\u5185 import \u5bf9\u5e94\u7684package\uff0c\u4f46\u662f\u4f7f\u7528\u5176\u5b83\u6587\u4ef6\u5b9a\u4e49\u7684\u6a21\u5757\u5219\u4e0d\u9700\u8981 import \uff0c\u4f7f\u7528tcl\u811a\u672c\u52a0\u5165\u6e90\u6587\u4ef6\u540e\uff0cvivado\u4f1a\u81ea\u884c\u627e\u5230\uff0c\u6bd4\u5982 core.sv \u4e2d module core import common ::* ;( input logic clk , reset , output ibus_req_t ireq , ... ); endmodule import \u4e86\u5b9a\u4e49\u5728 common.sv \u4e2d\u7684\u540d\u53eb common \u7684package\uff0c\u4f46\u662f\u4e0d\u9700\u8981 import regfile \uff0c\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\u3002 package common ; .... endpackage \u63a5\u5165Verilator\u4eff\u771f \u00b6 \u5c06 CPU \u63a5\u5165 Verilator Difftest \u7684\u4eff\u771f\u63a5\u53e3\u3002 \u9700\u8981\u4f8b\u5316\u4e09\u4e2a\u6a21\u5757\uff08\u6240\u7ed9\u6846\u67b6\u4e2d\u5df2\u4f8b\u5316\u597d\uff0c\u9700\u8981\u63a5\u7ebf\uff09\u3002 \u9996\u5148\u662f\u5f53\u524d\u5468\u671f\u63d0\u4ea4\u7684\u6307\u4ee4\uff1a DifftestInstrCommit DifftestInstrCommit ( . clock ( clk ), . coreid ( 0 ), // \u65e0\u9700\u6539\u52a8 . index ( 0 ), // \u591a\u53d1\u5c04\u65f6\uff0c\u4f8b\u5316\u591a\u4e2a\u8be5\u6a21\u5757\u3002\u524d\u56db\u4e2a Lab \u65e0\u9700\u6539\u52a8\u5b83 . valid ( 0 ), // \u65e0\u63d0\u4ea4\uff08\u6216\u63d0\u4ea4\u7684\u6307\u4ee4\u662fflush\u5bfc\u81f4\u7684bubble\u65f6\uff0c\u4e3a0\uff09 . pc ( 0 ), // \u8fd9\u6761\u6307\u4ee4\u7684 pc . instr ( 0 ), // \u8fd9\u6761\u6307\u4ee4\u7684\u5185\u5bb9\uff0c\u53ef\u4e0d\u6539\u52a8 . skip ( 0 ), // \u63d0\u4ea4\u7684\u662f\u4e00\u6761\u5185\u5b58\u8bfb\u5199\u6307\u4ee4\uff0c\u4e14\u8fd9\u90e8\u5206\u5185\u5b58\u5c5e\u4e8e\u8bbe\u5907\uff08addr[31] == 0\uff09\u65f6\uff0cskip\u4e3a1 . isRVC ( 0 ), // \u524d\u56db\u4e2a Lab \u65e0\u9700\u6539\u52a8 . scFailed ( 0 ), // \u524d\u56db\u4e2a Lab \u65e0\u9700\u6539\u52a8 . wen ( 0 ), // \u8fd9\u6761\u6307\u4ee4\u662f\u5426\u5199\u5165\u901a\u7528\u5bc4\u5b58\u5668\uff0c1 bit . wdest ( 0 ), // \u5199\u5165\u54ea\u4e2a\u901a\u7528\u5bc4\u5b58\u5668 . wdata ( 0 ) // \u5199\u5165\u7684\u503c ); \u8fd9\u4e2a\u5468\u671f\u7684\u6307\u4ee4\u63d0\u4ea4\u540e\uff0c\u901a\u7528\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff08\u5df2\u8fde\u63a5\u597d\uff09\uff1a DifftestArchIntRegState DifftestArchIntRegState ( . clock ( clk ), . coreid ( 0 ), . gpr_0 ( regfile . regs_nxt [ 0 ]), // ... ); \u8fd9\u4e2a\u5468\u671f\u7684\u6307\u4ee4\u63d0\u4ea4\u540e\uff0c\u7cfb\u7edf\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff08Lab4 \u7684\u5185\u5bb9\uff0c\u524d\u9762\u7684 Lab \u53ef\u4ee5\u4e0d\u7ba1\uff09\uff1a DifftestCSRState DifftestCSRState ( ); \u751f\u6210\u6ce2\u5f62\u56fe \u00b6 \u4e0d\u751f\u6210\u6ce2\u5f62\u56fe\u65f6\u8fd0\u884c\u6d4b\u8bd5\uff0c\u4f7f\u7528 make test-lab1 \uff1b\u9700\u8981\u751f\u6210\u6ce2\u5f62\u56fe\uff0c\u4f7f\u7528 make test-lab1 VOPT=\"--dump-wave\" \uff0c\u8fd0\u884c\u7ed3\u675f\u540e\u53ef\u5728 build \u76ee\u5f55\u4e0b\u770b\u5230\u6ce2\u5f62\u56fe\uff0c\u4f7f\u7528 gtkwave \u6253\u5f00\u3002 \u9ed8\u8ba4\u622a\u53d6\u524d 10^6 10^6 \u4e2a\u65f6\u949f\u5468\u671f\u3002\u5982\u679c\u9700\u8981\u8c03\u6574\uff0c\u4f7f\u7528 make test-lab1 VOPT=\"--dump-wave -b <begin> -e <end>\" \u3002","title":"\u5b9e\u9a8c\u6d4b\u8bd5"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#_1","text":"\u9996\u5148\uff0c\u4e0b\u8f7d\u4ee3\u7801\u4ed3\u5e93\u7684 master \u5206\u652f\uff1a cd 2022Spring/ # \u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684\u76ee\u5f55 git clone -b master https://github.com/FDUCSLG/Arch-2022Spring-FDU.git #\u4e0b\u8f7d\u4ed3\u5e93\u7684master\u5206\u652f cd Arch-2022Spring-FDU git submodule update --init --recursive make test-lab1 #\u6d4b\u8bd5","title":"\u5b9e\u9a8c\u6d4b\u8bd5\u65b9\u6cd5"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#_2","text":"\u6211\u4eec\u5728 vsrc \u91cc\u5199 SystemVerilog \u4ee3\u7801\u3002 \u6709\u4ee5\u4e0b\u8981\u6c42\uff1a \u6bcf\u4e2a .sv \u6587\u4ef6\u4ec5\u7f16\u5199\u4e00\u4e2a module \u6587\u4ef6\u540d\u4e0e module \u540d\u4e00\u81f4\uff0c\u4e00\u822c\u4e3a\u5168\u5c0f\u5199 \u6bcf\u4e2a\u6587\u4ef6\u90fd\u8981\u7528 ifndef __NAME_SV \u6765\u4fdd\u62a4 \u6bcf\u4e2a\u6587\u4ef6\u90fd\u8981\u6709\uff1a `ifdef VERILATOR `else `endif verilator \u4eff\u771f\u4e2d\uff0cmodule \u8fdb\u884c\u5143\u4ef6\u4f8b\u5316\u524d\uff0c\u9700\u8981\u4ee5vsrc/ \u4e3a\u6839\u7684\u76f8\u5bf9\u8def\u5f84 include \u6e90\u6587\u4ef6\uff0c\u5199\u5728`ifdef VERILATOR \u533a\u57df\u3002 vivado \u4e2d\uff0c\u53ea\u9700 include \u5934\u6587\u4ef6\uff0cinclude \u65f6\u4e0d\u5199\u8def\u5f84\uff0c\u53ea\u5199\u6587\u4ef6\u540d.svh \u3002 module \u7684\u4e00\u822c\u5f62\u5f0f\uff1a module sample import common ::* ; #( parameter XLEN = 16 ) ( input logic clk , reset ); endmodule","title":"\u4ee3\u7801\u7f16\u5199"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#verilator","text":"\u8fd9\u662f\u6211\u4eec\u4e3b\u8981\u7684\u8c03\u8bd5\u624b\u6bb5\u3002 \u8fd0\u884c make test-lab1 \u7b49\u6d4b\u8bd5\uff0c\u89c2\u5bdf\u8f93\u51fa\u3002\u5982\u679c\u6709 Hit Good Trap \u8f93\u51fa\u5219\u4e3a\u901a\u8fc7\u3002","title":"Verilator \u4eff\u771f"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#vivado","text":"\u8bf7\u5728 Verilator \u4eff\u771f\u901a\u8fc7\u540e\u518d\u5c1d\u8bd5 Vivado \u4eff\u771f\u3002 \u4f7f\u7528 Vivado2018.3 \u6253\u5f00 vivado/test1/project/project_1.xpr \uff0c\u70b9\u51fb tools \u4e0b\u7684Run Tcl Script \u8fd0\u884c vsrc/add_sources.tcl \u548c vivado/src/add_source.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\uff0c\u7136\u540e Run Simulation \u3002\u70b9\u51fb\u4e0a\u65b9\u4e09\u89d2\u5f00\u59cb\u4eff\u771f\u3002","title":"Vivado \u4eff\u771f"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#vivado_1","text":"\u8bf7\u81f3\u5c11\u5728 Verilator \u4eff\u771f\u901a\u8fc7\u540e\u518d\u5c1d\u8bd5\u4e0a\u677f\u3002 \u70b9\u51fb Generate Bitstream \uff0c\u751f\u6210\u5b8c\u6bd5\u540e\u8fde\u63a5\u5b9e\u9a8c\u677f\u5e76 Program Device \u3002 \u5728\u7535\u8111\u4e0a\u6253\u5f00\u4e32\u53e3\u8f6f\u4ef6 \uff08 Windows \u7cfb\u7edf\u53ef\u4f7f\u7528 elearning \u4e0a\u53d1\u7684 SecureCRT\uff0c\u5176\u4ed6\u7cfb\u7edf\u8bf7\u81ea\u884c\u5bfb\u627e\u76f8\u5173\u8f6f\u4ef6\uff09\uff0c\u8bbe\u7f6e\u4e32\u53e3\uff08Serial\uff09\u6ce2\u7279\u7387\uff08Baud Rate\uff099600\uff0c\u7136\u540e\u8fde\u63a5\u3002 \u6309\u4e0b\u5b9e\u9a8c\u677f\u4e0a\u7684 prog \uff0c\u53ef\u5728\u4e32\u53e3\u8f6f\u4ef6\u4e2d\u770b\u5230\u4e00\u884c\u8f93\u51fa\uff1a BASYS3 GPIO/UART DEMO! \u8fd9\u662f\u5185\u7f6e\u7684 bitstream \u7684\u8f93\u51fa\uff0c\u4e0d\u662f\u6211\u4eec CPU \u7684\u8f93\u51fa\u3002\u70b9\u51fb Program Device \u624d\u662f\u6211\u4eec CPU \u7684\u8f93\u51fa\u3002","title":"Vivado \u4e0a\u677f"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#_3","text":"","title":"\u5b9e\u9a8c\u6d4b\u8bd5\u4ecb\u7ecd"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#cpu","text":"\u6d41\u6c34\u7ebf\u90e8\u5206\u6709\u6307\u4ee4\u5185\u5b58\u63a5\u53e3\u4e0e\u6570\u636e\u5185\u5b58\u63a5\u53e3\uff0cCPU\u4e0e\u5185\u5b58\u7684\u4ea4\u4e92**\u53ea\u9700\u8981**\u8fd9\u4e24\u4e2a\u63a5\u53e3\uff0c\u5b9a\u4e49\u5728 include/common.sv ; \u5b9e\u73b0\u5728 core.sv \u7684 input \u548c output \u63a5\u53e3 \u6307\u4ee4\u5185\u5b58\u63a5\u53e3\uff1a typedef struct packed { logic valid ; // in request? (Used in Lab 2) addr_t addr ; // target address } ibus_req_t ; typedef struct packed { logic addr_ok ; // is the address accepted by cache? (Used in Lab 2) logic data_ok ; // is the field \"data\" valid? (Used in Lab 2) u32 data ; // the data read from cache } ibus_resp_t ; \u6570\u636e\u5185\u5b58\u63a5\u53e3\uff1a typedef struct packed { logic valid ; // in request? addr_t addr ; // target address msize_t size ; // number of bytes (Used in Lab 2) strobe_t strobe ; // which bytes are enabled? set to zeros for read request (in Lab 1, it is either '0(0x0) or '1(0xff)) word_t data ; // the data to write } dbus_req_t ; typedef struct packed { logic addr_ok ; // is the address accepted by cache? (Used in Lab 2) logic data_ok ; // is the field \"data\" valid? (Used in Lab 2) word_t data ; // the data read from cache } dbus_resp_t ;","title":"CPU \u8bbf\u5b58\u63a5\u53e3"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#includeimport","text":"\u5bf9\u4e8everilator\uff0c\u5f15\u7528\u5176\u5b83\u6587\u4ef6\u5b9a\u4e49\u7684\u7ed3\u6784\u6216\u662f\u6a21\u5757\u90fd\u9700\u8981\u8fdb\u884c include `ifdef VERILATOR `include \"\u6587\u4ef6\u76f8\u5bf9\u4e8evsrc\u7684\u8def\u5f84\" `else `endif \u6bd4\u5982\u5728 core.sv \u4e2d\uff0c\u4e0d\u4ec5\u4f7f\u7528\u5230\u4e86\u5b9a\u4e49\u5728 common.sv \u4e2d\u7684 ibus \u548c dbus \uff0c\u5982\u679c\u4e5f\u7528\u5230\u4e86 regfile.sv \u4e2d\u5b9a\u4e49\u7684 regfile \u6a21\u5757\uff0c\u90a3\u4e48**\u90fd\u9700\u8981**\u8fdb\u884c include \uff1a `ifdef VERILATOR `include \"include/common.sv\" `include \"pipeline/regfile/regfile.sv\" `else `endif \u800c\u5bf9\u4e8evivado\uff0c\u4e3a\u4e86\u5f15\u7528\u5176\u5b83\u7ed3\u6784\uff0c\u9700\u8981\u5728\u6bcf\u4e2a\u6a21\u5757\u5185 import \u5bf9\u5e94\u7684package\uff0c\u4f46\u662f\u4f7f\u7528\u5176\u5b83\u6587\u4ef6\u5b9a\u4e49\u7684\u6a21\u5757\u5219\u4e0d\u9700\u8981 import \uff0c\u4f7f\u7528tcl\u811a\u672c\u52a0\u5165\u6e90\u6587\u4ef6\u540e\uff0cvivado\u4f1a\u81ea\u884c\u627e\u5230\uff0c\u6bd4\u5982 core.sv \u4e2d module core import common ::* ;( input logic clk , reset , output ibus_req_t ireq , ... ); endmodule import \u4e86\u5b9a\u4e49\u5728 common.sv \u4e2d\u7684\u540d\u53eb common \u7684package\uff0c\u4f46\u662f\u4e0d\u9700\u8981 import regfile \uff0c\u76f4\u63a5\u4f7f\u7528\u5373\u53ef\u3002 package common ; .... endpackage","title":"include\u4e0eimport"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#verilator_1","text":"\u5c06 CPU \u63a5\u5165 Verilator Difftest \u7684\u4eff\u771f\u63a5\u53e3\u3002 \u9700\u8981\u4f8b\u5316\u4e09\u4e2a\u6a21\u5757\uff08\u6240\u7ed9\u6846\u67b6\u4e2d\u5df2\u4f8b\u5316\u597d\uff0c\u9700\u8981\u63a5\u7ebf\uff09\u3002 \u9996\u5148\u662f\u5f53\u524d\u5468\u671f\u63d0\u4ea4\u7684\u6307\u4ee4\uff1a DifftestInstrCommit DifftestInstrCommit ( . clock ( clk ), . coreid ( 0 ), // \u65e0\u9700\u6539\u52a8 . index ( 0 ), // \u591a\u53d1\u5c04\u65f6\uff0c\u4f8b\u5316\u591a\u4e2a\u8be5\u6a21\u5757\u3002\u524d\u56db\u4e2a Lab \u65e0\u9700\u6539\u52a8\u5b83 . valid ( 0 ), // \u65e0\u63d0\u4ea4\uff08\u6216\u63d0\u4ea4\u7684\u6307\u4ee4\u662fflush\u5bfc\u81f4\u7684bubble\u65f6\uff0c\u4e3a0\uff09 . pc ( 0 ), // \u8fd9\u6761\u6307\u4ee4\u7684 pc . instr ( 0 ), // \u8fd9\u6761\u6307\u4ee4\u7684\u5185\u5bb9\uff0c\u53ef\u4e0d\u6539\u52a8 . skip ( 0 ), // \u63d0\u4ea4\u7684\u662f\u4e00\u6761\u5185\u5b58\u8bfb\u5199\u6307\u4ee4\uff0c\u4e14\u8fd9\u90e8\u5206\u5185\u5b58\u5c5e\u4e8e\u8bbe\u5907\uff08addr[31] == 0\uff09\u65f6\uff0cskip\u4e3a1 . isRVC ( 0 ), // \u524d\u56db\u4e2a Lab \u65e0\u9700\u6539\u52a8 . scFailed ( 0 ), // \u524d\u56db\u4e2a Lab \u65e0\u9700\u6539\u52a8 . wen ( 0 ), // \u8fd9\u6761\u6307\u4ee4\u662f\u5426\u5199\u5165\u901a\u7528\u5bc4\u5b58\u5668\uff0c1 bit . wdest ( 0 ), // \u5199\u5165\u54ea\u4e2a\u901a\u7528\u5bc4\u5b58\u5668 . wdata ( 0 ) // \u5199\u5165\u7684\u503c ); \u8fd9\u4e2a\u5468\u671f\u7684\u6307\u4ee4\u63d0\u4ea4\u540e\uff0c\u901a\u7528\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff08\u5df2\u8fde\u63a5\u597d\uff09\uff1a DifftestArchIntRegState DifftestArchIntRegState ( . clock ( clk ), . coreid ( 0 ), . gpr_0 ( regfile . regs_nxt [ 0 ]), // ... ); \u8fd9\u4e2a\u5468\u671f\u7684\u6307\u4ee4\u63d0\u4ea4\u540e\uff0c\u7cfb\u7edf\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\uff08Lab4 \u7684\u5185\u5bb9\uff0c\u524d\u9762\u7684 Lab \u53ef\u4ee5\u4e0d\u7ba1\uff09\uff1a DifftestCSRState DifftestCSRState ( );","title":"\u63a5\u5165Verilator\u4eff\u771f"},{"location":"%E5%AE%9E%E9%AA%8C%E6%B5%8B%E8%AF%95/#_4","text":"\u4e0d\u751f\u6210\u6ce2\u5f62\u56fe\u65f6\u8fd0\u884c\u6d4b\u8bd5\uff0c\u4f7f\u7528 make test-lab1 \uff1b\u9700\u8981\u751f\u6210\u6ce2\u5f62\u56fe\uff0c\u4f7f\u7528 make test-lab1 VOPT=\"--dump-wave\" \uff0c\u8fd0\u884c\u7ed3\u675f\u540e\u53ef\u5728 build \u76ee\u5f55\u4e0b\u770b\u5230\u6ce2\u5f62\u56fe\uff0c\u4f7f\u7528 gtkwave \u6253\u5f00\u3002 \u9ed8\u8ba4\u622a\u53d6\u524d 10^6 10^6 \u4e2a\u65f6\u949f\u5468\u671f\u3002\u5982\u679c\u9700\u8981\u8c03\u6574\uff0c\u4f7f\u7528 make test-lab1 VOPT=\"--dump-wave -b <begin> -e <end>\" \u3002","title":"\u751f\u6210\u6ce2\u5f62\u56fe"},{"location":"%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/","text":"\u5b9e\u9a8c\u73af\u5883\u642d\u5efa \u00b6 \u672c\u5b66\u671f\u7684\u8bfe\u7a0b\uff0c\u6211\u4eec\u9700\u8981\u5728\u81ea\u5df1\u7684\u7535\u8111\u4e0a\u5b89\u88c5\uff1a Linux \u73af\u5883\uff08Ubuntu 20.04\uff09 Verilator GTKWave Vivado 2018.3 1 Linux \u73af\u5883\u5b89\u88c5 \u00b6 \u6709\u4e09\u79cd\u65b9\u6848\uff1a Windows+WSL Linux \u865a\u62df\u673a\uff08VMware\uff09 Linux \u539f\u751f\u7cfb\u7edf \u5982\u679c\u4f60\u6ca1\u5b89\u88c5\u8fc7\u540e\u4e24\u79cd\uff0c\u90a3\u4e48\u6211\u63a8\u8350\u7b2c\u4e00\u79cd\u65b9\u6848\uff0c\u4ee5\u4e0b\u7ed9\u51fa\u5b89\u88c5\u6b65\u9aa4\uff1a \u5728 Windows \u7cfb\u7edf\u4e0a\u6253\u5f00 Microsoft Store \u641c\u7d22 Ubuntu 20.04 \u5e76\u5b89\u88c5 \u5b89\u88c5 Visual Studio Code \uff08\u63a8\u8350\u7684\u4ee3\u7801\u7f16\u8f91\u5668\uff09 \u5c06 WSL \u8bbe\u7f6e\u4e3a\u9ed8\u8ba4 Terminal \u914d\u7f6e apt \u6e90\uff08\u4fee\u6539 /etc/apt/sources.list \uff0c\u63a8\u8350 \u4e2d\u79d1\u5927\u6e90 \uff09 \u5b89\u88c5\u4e00\u4e9b\u57fa\u672c\u7684\u8f6f\u4ef6\u5305 sudo apt install git perl python3 make autoconf g++ flex bison ccache 2 \u4eff\u771f\u5668 Verilator \u00b6 \u6211\u4eec\u5c06\u4f7f\u7528 verilator \u8fdb\u884c\u7535\u8def\u4eff\u771f\u3002\u9700\u8981 verilator >= 4.210 \u7248\u672c\u3002Verilator \u6ca1\u6709 Windows \u7248\u672c\u7684\uff0c\u9700\u8981\u5728 Linux \u73af\u5883\u4e2d\u8fd0\u884c\u3002 \u65e0\u8bba\u4f60\u4f7f\u7528\u4ec0\u4e48\u7248\u672c\u7684 Linux\uff0c\u6211\u4eec\u90fd\u63a8\u8350\u4ece\u6e90\u7801\u8fdb\u884c\u7f16\u8bd1\u3002 cd ~ #\u5982\u679c\u4f7f\u7528 WSL\uff0c\u8fd9\u4e2a\u76ee\u5f55\u5728 C \u76d8\u7684\u67d0\u4e2a\u4f4d\u7f6e git clone git://github.com/verilator/verilator cd verilator git checkout v4.210 autoconf #\u5982\u679c\u663e\u793a not found\uff0c\u90a3\u4e48sudo apt install autoconf\u540e\u518d\u6267\u884c autoconf ./configure make -j12 #\u5982\u679c\u8fd9\u4e00\u6b65\u51fa\u73b0\u95ee\u9898\uff0c\u6539\u6210make -j4\u6216\u8005\u76f4\u63a5make sudo apt remove verilator #\u5378\u8f7d\u5df2\u6709\u7684\u7248\u672c sudo make uninstall sudo make install verilator --version #\u67e5\u770bverilator\u7684\u7248\u672c \u5982\u679c\u62a5\u67d0\u4e2a\u5934\u6587\u4ef6 not found\uff0c\u8bf7\u53c2\u8003 https://verilator.org/guide/latest/install.html#git-quick-install 3 \u6ce2\u5f62\u56fe\u8f6f\u4ef6 GTKWave \u00b6 \u6211\u4eec\u5c06\u4f7f\u7528 GTKWave \u8f6f\u4ef6\u67e5\u770b\u4eff\u771f\u6ce2\u5f62\u56fe\u3002 \u5982\u679c\u4f60\u4f7f\u7528 Linux \u865a\u62df\u673a\u6216 Linux \u539f\u751f\u7cfb\u7edf\uff0c\u53ea\u9700\uff1a sudo apt install gtkwave \u8fd0\u884c GTKwave\uff1a gtkwave trace.fst \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows + WSL\uff0c\u5219\u9700\u8981\u5b89\u88c5 GTKwave \u7684 Windows \u7248\u672c\uff0c\u5728 elearning \u4e0a\u53ef\u4ee5\u4e0b\u8f7d\u514d\u5b89\u88c5\u7248\u672c\u3002\u4f7f\u7528\u65f6\uff0c\u53cc\u51fb fst \u6ce2\u5f62\u56fe\u6587\u4ef6\uff0c\u8bbe\u7f6e gtkwave/bin/gtkwave.exe \u4e3a\u9ed8\u8ba4\u6253\u5f00\u7a0b\u5e8f\u5373\u53ef\u3002 4 Vivado \u00b6 \u6211\u4eec\u8981\u6c42\u4f7f\u7528 Vivado 2018.3\uff0c\u6307\u5b9a\u8fd9\u4e2a\u7248\u672c\uff0c\u5982\u679c\u662f\u5176\u4ed6\u7248\u672c\u7684 Vivado \u53ef\u80fd\u6709\u4e0d\u517c\u5bb9\u3002 \u53ef\u4ee5\u6839\u636e https://github.com/Tan-YiFan/DigitalLogic-Autumn2020 \u91cc\u7684 notes/01\u5f00\u53d1\u6d41\u7a0b\uff08\u4e0a\uff09 \u8fdb\u884c\u5b89\u88c5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4ece \u53c2\u8003\u8d44\u6599 \u4e2d\u4e0b\u8f7d\u6e90\u6587\u4ef6\u3002 \u7531\u4e8e\u8be5\u8f6f\u4ef6\u4f53\u79ef\u8fc7\u5927\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u673a\u623f\u7535\u8111\u4e0a Win10-2 \u5206\u533a\u4e0a\u7684 Vivado\u3002 \u5b9e\u9a8c\u73af\u5883\u4ecb\u7ecd \u00b6 verilator\uff1a\u6211\u4eec\u91c7\u7528 verilator \u5bf9CPU\u8fdb\u884c\u6a21\u62df\uff08 verilator \u8981\u6c42\u8fd0\u884c\u5728linux\u73af\u5883\u4e0b\uff0c\u6b64\u5916\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u5e93\u6587\u4ef6\uff0c\u5177\u4f53\u53ef\u89c1 \u5b9e\u9a8c\u73af\u5883\u642d\u5efa\uff09\uff0c\u7136\u540e\u7528 difftest \u8fdb\u884c\u6307\u4ee4\u7ea7\u522b\u5c42\u9762\u7684\u5bf9\u6bd4\uff0c\u76f4\u63a5\u5728\u4ed3\u5e93\u76ee\u5f55\u4e0b\u6267\u884c make test-lab* \u5373\u53ef\u3002\u867d\u7136verilator\u7684\u4eff\u771f\u901f\u5ea6\u4e00\u822c\u800c\u8a00\u66f4\u5feb\uff0c\u4f46\u662f\u529f\u80fd\u8fd8\u4e0d\u5b8c\u5584\uff0c\u56e0\u6b64\u5bf9\u6211\u4eec\u7f16\u5199\u4ee3\u7801\u6709\u4e00\u5b9a\u7684\u9650\u5236\uff08\u5177\u4f53\u89c1 \u5b9e\u9a8c\u6d4b\u8bd5\u65b9\u6cd5 \u4e2d\u7684\u4ee3\u7801\u7f16\u5199\u90e8\u5206\uff09\u53ef\u4ee5\u53c2\u8003 \u53bb\u5e74\u5b9e\u9a8c\u7684\u4ecb\u7ecd vivado\uff1a\u6253\u5f00 vivado \uff0c\u8fd0\u884c vivado\\test1\\project\\project_1.xpr \uff0c\u70b9\u51fb tools \u9009\u9879\u4e0b\u7684 run tcl script \uff0c\u8fd0\u884c vsrc\\add_sources.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4eff\u771f\u3001\u7efc\u5408\u3001\u751f\u6210bit\u6587\u4ef6\u4e0a\u677f\u4e86\u3002 Makefile\uff1amakefile\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u5de5\u7a0b\u6587\u4ef6\u7684\u7f16\u8bd1\u89c4\u5219\uff0c\u63cf\u8ff0\u4e86\u6574\u4e2a\u5de5\u7a0b\u7684\u7f16\u8bd1\u548c\u94fe\u63a5\u7b49\u89c4\u5219\uff0c\u5185\u90e8\u5177\u4f53\u7684\u5b9e\u73b0\u4e0d\u9700\u8981\u4e86\u89e3\uff0c\u53ea\u9700\u8981\u77e5\u9053\u901a\u8fc7 make test-lab* \u53ef\u4ee5\u5bf9\u5bf9\u5e94\u7684lab\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u5373\u53ef git\uff1a\u6211\u4eec\u91c7\u7528 git \u5de5\u5177 \u5bf9\u6240\u6709\u7684 lab \u8fdb\u884c\u7ba1\u7406\u5e76\u53d1\u5e03 \u8bf7\u5148\u7528 clone \u547d\u4ee4\u4e0b\u8f7d\u6211\u4eec\u7684\u4ed3\u5e93\u7684master\uff0c\u7136\u540e\u518d\u4e0b\u8f7ddifftest\u5b50\u4ed3\u5e93\uff1a git clone -b master https://github.com/FDUCSLG/Arch-2022Spring-FDU.git #\u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u9700\u5173\u6ce8master\u8fd9\u4e2a\u5206\u652f cd Arch-2022Spring-FDU git submodule update --init --recursive \u5176\u4e2d\u7684\u7b2c\u4e00\u6761\u547d\u4ee4\u7684 -b master \u6307\u7684\u662f\u4e0b\u8f7d master \u8fd9\u4e2a\u5206\u652f\uff0c\u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u9700\u8981\u5173\u6ce8 master \u5206\u652f\uff0c\u6240\u4ee5\u5176\u5b83\u7684\u5206\u652f\u53ef\u4ee5\u4e0d\u4e0b\u8f7d\u3002 \u6b64\u5916\u6211\u4eec\u4f1a\u4e0d\u5b9a\u65f6\u5730\u66f4\u65b0\u4ee3\u7801\u4ed3\u5e93\u4ee5\u89e3\u51b3bug\uff08\u56e0\u6b64\u5fc5\u987b\u7528clone\u628a\u4ed3\u5e93\u914d\u7f6e\u76f8\u5173\u6587\u4ef6\u4e5f\u4e0b\u8f7d\u4e0b\u6765\uff0c\u8fd9\u6837\u624d\u65b9\u4fbf\u8fdb\u884c\u540e\u7eed\u66f4\u65b0\uff09\uff0c\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u52a9\u6559\u90fd\u4f1a\u5728\u7fa4\u91cc\u6216\u8005\u4e0a\u8bfe\u7684\u65f6\u5019\u8fdb\u884c\u63d0\u9192\uff0c\u5f53\u7136\u66f4\u597d\u7684\u662f\u517b\u6210\u6bcf\u6b21\u5199\u4ee3\u7801\u524d\u53ca\u65f6\u66f4\u65b0\u7684\u4e60\u60ef \u3002\u4ee5\u4e0b\u662f\u66f4\u65b0\u7684\u6b65\u9aa4\uff1a # \u5148\u5728vsrc\u76ee\u5f55\u4e0b\u63d0\u4ea4\u4fdd\u5b58\u4f60\u5199\u7684\u4ee3\u7801 cd vsrc git add . git commit -m \"\u672c\u6b64\u63d0\u4ea4\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\uff1acommit for pull\" # \u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u62c9\u53d6\u5e76\u5408\u5e76\u8fdc\u7aef\u4ed3\u5e93\u7684\u4ee3\u7801 git pull origin master # \u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u9700\u5173\u6ce8master\u5206\u652f # \u53ef\u80fd\u4f1a\u6709\u51b2\u7a81\uff0c\u56e0\u4eba\u800c\u5f02\uff0c\u9700\u8981\u81ea\u884c\u89e3\u51b3 git submodule update #\u66f4\u65b0\u5b50\u4ed3\u5e93 git \u7684\u529f\u80fd\u5341\u5206\u5f3a\u5927\uff0c\u8fd9\u91cc\u6240\u7528\u7684\u4e0d\u53ca\u4e5d\u725b\u4e00\u6bdb\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 GTKWave\uff1a\u5f00\u6e90\u7684\u6ce2\u5f62\u56fe\u6d4f\u89c8\u5668\uff0c\u5728 make \u547d\u4ee4\u540e\u52a0\u4e0a VOPT=\"--dump-wave\" \u5373\u53ef\u5728 build \u76ee\u5f55\u4e0b\u770b\u5230 fst \u683c\u5f0f\u7684\u6ce2\u5f62\u56fe\uff0c\u53ef\u4ee5\u53c2\u8003 \u53bb\u5e74\u5b9e\u9a8c\u7684\u4ecb\u7ecd \u3002","title":"\u5b9e\u9a8c\u73af\u5883"},{"location":"%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/#_1","text":"\u672c\u5b66\u671f\u7684\u8bfe\u7a0b\uff0c\u6211\u4eec\u9700\u8981\u5728\u81ea\u5df1\u7684\u7535\u8111\u4e0a\u5b89\u88c5\uff1a Linux \u73af\u5883\uff08Ubuntu 20.04\uff09 Verilator GTKWave Vivado 2018.3","title":"\u5b9e\u9a8c\u73af\u5883\u642d\u5efa"},{"location":"%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/#1-linux","text":"\u6709\u4e09\u79cd\u65b9\u6848\uff1a Windows+WSL Linux \u865a\u62df\u673a\uff08VMware\uff09 Linux \u539f\u751f\u7cfb\u7edf \u5982\u679c\u4f60\u6ca1\u5b89\u88c5\u8fc7\u540e\u4e24\u79cd\uff0c\u90a3\u4e48\u6211\u63a8\u8350\u7b2c\u4e00\u79cd\u65b9\u6848\uff0c\u4ee5\u4e0b\u7ed9\u51fa\u5b89\u88c5\u6b65\u9aa4\uff1a \u5728 Windows \u7cfb\u7edf\u4e0a\u6253\u5f00 Microsoft Store \u641c\u7d22 Ubuntu 20.04 \u5e76\u5b89\u88c5 \u5b89\u88c5 Visual Studio Code \uff08\u63a8\u8350\u7684\u4ee3\u7801\u7f16\u8f91\u5668\uff09 \u5c06 WSL \u8bbe\u7f6e\u4e3a\u9ed8\u8ba4 Terminal \u914d\u7f6e apt \u6e90\uff08\u4fee\u6539 /etc/apt/sources.list \uff0c\u63a8\u8350 \u4e2d\u79d1\u5927\u6e90 \uff09 \u5b89\u88c5\u4e00\u4e9b\u57fa\u672c\u7684\u8f6f\u4ef6\u5305 sudo apt install git perl python3 make autoconf g++ flex bison ccache","title":"1 Linux \u73af\u5883\u5b89\u88c5"},{"location":"%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/#2-verilator","text":"\u6211\u4eec\u5c06\u4f7f\u7528 verilator \u8fdb\u884c\u7535\u8def\u4eff\u771f\u3002\u9700\u8981 verilator >= 4.210 \u7248\u672c\u3002Verilator \u6ca1\u6709 Windows \u7248\u672c\u7684\uff0c\u9700\u8981\u5728 Linux \u73af\u5883\u4e2d\u8fd0\u884c\u3002 \u65e0\u8bba\u4f60\u4f7f\u7528\u4ec0\u4e48\u7248\u672c\u7684 Linux\uff0c\u6211\u4eec\u90fd\u63a8\u8350\u4ece\u6e90\u7801\u8fdb\u884c\u7f16\u8bd1\u3002 cd ~ #\u5982\u679c\u4f7f\u7528 WSL\uff0c\u8fd9\u4e2a\u76ee\u5f55\u5728 C \u76d8\u7684\u67d0\u4e2a\u4f4d\u7f6e git clone git://github.com/verilator/verilator cd verilator git checkout v4.210 autoconf #\u5982\u679c\u663e\u793a not found\uff0c\u90a3\u4e48sudo apt install autoconf\u540e\u518d\u6267\u884c autoconf ./configure make -j12 #\u5982\u679c\u8fd9\u4e00\u6b65\u51fa\u73b0\u95ee\u9898\uff0c\u6539\u6210make -j4\u6216\u8005\u76f4\u63a5make sudo apt remove verilator #\u5378\u8f7d\u5df2\u6709\u7684\u7248\u672c sudo make uninstall sudo make install verilator --version #\u67e5\u770bverilator\u7684\u7248\u672c \u5982\u679c\u62a5\u67d0\u4e2a\u5934\u6587\u4ef6 not found\uff0c\u8bf7\u53c2\u8003 https://verilator.org/guide/latest/install.html#git-quick-install","title":"2 \u4eff\u771f\u5668 Verilator"},{"location":"%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/#3-gtkwave","text":"\u6211\u4eec\u5c06\u4f7f\u7528 GTKWave \u8f6f\u4ef6\u67e5\u770b\u4eff\u771f\u6ce2\u5f62\u56fe\u3002 \u5982\u679c\u4f60\u4f7f\u7528 Linux \u865a\u62df\u673a\u6216 Linux \u539f\u751f\u7cfb\u7edf\uff0c\u53ea\u9700\uff1a sudo apt install gtkwave \u8fd0\u884c GTKwave\uff1a gtkwave trace.fst \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662f Windows + WSL\uff0c\u5219\u9700\u8981\u5b89\u88c5 GTKwave \u7684 Windows \u7248\u672c\uff0c\u5728 elearning \u4e0a\u53ef\u4ee5\u4e0b\u8f7d\u514d\u5b89\u88c5\u7248\u672c\u3002\u4f7f\u7528\u65f6\uff0c\u53cc\u51fb fst \u6ce2\u5f62\u56fe\u6587\u4ef6\uff0c\u8bbe\u7f6e gtkwave/bin/gtkwave.exe \u4e3a\u9ed8\u8ba4\u6253\u5f00\u7a0b\u5e8f\u5373\u53ef\u3002","title":"3 \u6ce2\u5f62\u56fe\u8f6f\u4ef6 GTKWave"},{"location":"%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/#4-vivado","text":"\u6211\u4eec\u8981\u6c42\u4f7f\u7528 Vivado 2018.3\uff0c\u6307\u5b9a\u8fd9\u4e2a\u7248\u672c\uff0c\u5982\u679c\u662f\u5176\u4ed6\u7248\u672c\u7684 Vivado \u53ef\u80fd\u6709\u4e0d\u517c\u5bb9\u3002 \u53ef\u4ee5\u6839\u636e https://github.com/Tan-YiFan/DigitalLogic-Autumn2020 \u91cc\u7684 notes/01\u5f00\u53d1\u6d41\u7a0b\uff08\u4e0a\uff09 \u8fdb\u884c\u5b89\u88c5\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4ece \u53c2\u8003\u8d44\u6599 \u4e2d\u4e0b\u8f7d\u6e90\u6587\u4ef6\u3002 \u7531\u4e8e\u8be5\u8f6f\u4ef6\u4f53\u79ef\u8fc7\u5927\uff0c\u4f60\u4e5f\u53ef\u4ee5\u7528\u673a\u623f\u7535\u8111\u4e0a Win10-2 \u5206\u533a\u4e0a\u7684 Vivado\u3002","title":"4 Vivado"},{"location":"%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/#_2","text":"verilator\uff1a\u6211\u4eec\u91c7\u7528 verilator \u5bf9CPU\u8fdb\u884c\u6a21\u62df\uff08 verilator \u8981\u6c42\u8fd0\u884c\u5728linux\u73af\u5883\u4e0b\uff0c\u6b64\u5916\u8fd8\u9700\u8981\u5b89\u88c5\u4e00\u4e9b\u5e93\u6587\u4ef6\uff0c\u5177\u4f53\u53ef\u89c1 \u5b9e\u9a8c\u73af\u5883\u642d\u5efa\uff09\uff0c\u7136\u540e\u7528 difftest \u8fdb\u884c\u6307\u4ee4\u7ea7\u522b\u5c42\u9762\u7684\u5bf9\u6bd4\uff0c\u76f4\u63a5\u5728\u4ed3\u5e93\u76ee\u5f55\u4e0b\u6267\u884c make test-lab* \u5373\u53ef\u3002\u867d\u7136verilator\u7684\u4eff\u771f\u901f\u5ea6\u4e00\u822c\u800c\u8a00\u66f4\u5feb\uff0c\u4f46\u662f\u529f\u80fd\u8fd8\u4e0d\u5b8c\u5584\uff0c\u56e0\u6b64\u5bf9\u6211\u4eec\u7f16\u5199\u4ee3\u7801\u6709\u4e00\u5b9a\u7684\u9650\u5236\uff08\u5177\u4f53\u89c1 \u5b9e\u9a8c\u6d4b\u8bd5\u65b9\u6cd5 \u4e2d\u7684\u4ee3\u7801\u7f16\u5199\u90e8\u5206\uff09\u53ef\u4ee5\u53c2\u8003 \u53bb\u5e74\u5b9e\u9a8c\u7684\u4ecb\u7ecd vivado\uff1a\u6253\u5f00 vivado \uff0c\u8fd0\u884c vivado\\test1\\project\\project_1.xpr \uff0c\u70b9\u51fb tools \u9009\u9879\u4e0b\u7684 run tcl script \uff0c\u8fd0\u884c vsrc\\add_sources.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\u540e\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u4eff\u771f\u3001\u7efc\u5408\u3001\u751f\u6210bit\u6587\u4ef6\u4e0a\u677f\u4e86\u3002 Makefile\uff1amakefile\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u5de5\u7a0b\u6587\u4ef6\u7684\u7f16\u8bd1\u89c4\u5219\uff0c\u63cf\u8ff0\u4e86\u6574\u4e2a\u5de5\u7a0b\u7684\u7f16\u8bd1\u548c\u94fe\u63a5\u7b49\u89c4\u5219\uff0c\u5185\u90e8\u5177\u4f53\u7684\u5b9e\u73b0\u4e0d\u9700\u8981\u4e86\u89e3\uff0c\u53ea\u9700\u8981\u77e5\u9053\u901a\u8fc7 make test-lab* \u53ef\u4ee5\u5bf9\u5bf9\u5e94\u7684lab\u8fdb\u884c\u4eff\u771f\u6d4b\u8bd5\u5373\u53ef git\uff1a\u6211\u4eec\u91c7\u7528 git \u5de5\u5177 \u5bf9\u6240\u6709\u7684 lab \u8fdb\u884c\u7ba1\u7406\u5e76\u53d1\u5e03 \u8bf7\u5148\u7528 clone \u547d\u4ee4\u4e0b\u8f7d\u6211\u4eec\u7684\u4ed3\u5e93\u7684master\uff0c\u7136\u540e\u518d\u4e0b\u8f7ddifftest\u5b50\u4ed3\u5e93\uff1a git clone -b master https://github.com/FDUCSLG/Arch-2022Spring-FDU.git #\u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u9700\u5173\u6ce8master\u8fd9\u4e2a\u5206\u652f cd Arch-2022Spring-FDU git submodule update --init --recursive \u5176\u4e2d\u7684\u7b2c\u4e00\u6761\u547d\u4ee4\u7684 -b master \u6307\u7684\u662f\u4e0b\u8f7d master \u8fd9\u4e2a\u5206\u652f\uff0c\u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u9700\u8981\u5173\u6ce8 master \u5206\u652f\uff0c\u6240\u4ee5\u5176\u5b83\u7684\u5206\u652f\u53ef\u4ee5\u4e0d\u4e0b\u8f7d\u3002 \u6b64\u5916\u6211\u4eec\u4f1a\u4e0d\u5b9a\u65f6\u5730\u66f4\u65b0\u4ee3\u7801\u4ed3\u5e93\u4ee5\u89e3\u51b3bug\uff08\u56e0\u6b64\u5fc5\u987b\u7528clone\u628a\u4ed3\u5e93\u914d\u7f6e\u76f8\u5173\u6587\u4ef6\u4e5f\u4e0b\u8f7d\u4e0b\u6765\uff0c\u8fd9\u6837\u624d\u65b9\u4fbf\u8fdb\u884c\u540e\u7eed\u66f4\u65b0\uff09\uff0c\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u52a9\u6559\u90fd\u4f1a\u5728\u7fa4\u91cc\u6216\u8005\u4e0a\u8bfe\u7684\u65f6\u5019\u8fdb\u884c\u63d0\u9192\uff0c\u5f53\u7136\u66f4\u597d\u7684\u662f\u517b\u6210\u6bcf\u6b21\u5199\u4ee3\u7801\u524d\u53ca\u65f6\u66f4\u65b0\u7684\u4e60\u60ef \u3002\u4ee5\u4e0b\u662f\u66f4\u65b0\u7684\u6b65\u9aa4\uff1a # \u5148\u5728vsrc\u76ee\u5f55\u4e0b\u63d0\u4ea4\u4fdd\u5b58\u4f60\u5199\u7684\u4ee3\u7801 cd vsrc git add . git commit -m \"\u672c\u6b64\u63d0\u4ea4\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\uff1acommit for pull\" # \u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u62c9\u53d6\u5e76\u5408\u5e76\u8fdc\u7aef\u4ed3\u5e93\u7684\u4ee3\u7801 git pull origin master # \u6211\u4eec\u7684\u5b9e\u9a8c\u53ea\u9700\u5173\u6ce8master\u5206\u652f # \u53ef\u80fd\u4f1a\u6709\u51b2\u7a81\uff0c\u56e0\u4eba\u800c\u5f02\uff0c\u9700\u8981\u81ea\u884c\u89e3\u51b3 git submodule update #\u66f4\u65b0\u5b50\u4ed3\u5e93 git \u7684\u529f\u80fd\u5341\u5206\u5f3a\u5927\uff0c\u8fd9\u91cc\u6240\u7528\u7684\u4e0d\u53ca\u4e5d\u725b\u4e00\u6bdb\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u81ea\u884c\u641c\u7d22\u3002 GTKWave\uff1a\u5f00\u6e90\u7684\u6ce2\u5f62\u56fe\u6d4f\u89c8\u5668\uff0c\u5728 make \u547d\u4ee4\u540e\u52a0\u4e0a VOPT=\"--dump-wave\" \u5373\u53ef\u5728 build \u76ee\u5f55\u4e0b\u770b\u5230 fst \u683c\u5f0f\u7684\u6ce2\u5f62\u56fe\uff0c\u53ef\u4ee5\u53c2\u8003 \u53bb\u5e74\u5b9e\u9a8c\u7684\u4ecb\u7ecd \u3002","title":"\u5b9e\u9a8c\u73af\u5883\u4ecb\u7ecd"},{"location":"%E5%AE%9E%E9%AA%8C%E9%A1%BB%E7%9F%A5/","text":"\u5b9e\u9a8c\u4ed3\u5e93\u7ed3\u6784 \u00b6 Arch-2022Sping-FDU \u2502\u2500\u2500 build\uff1a\u4eff\u771f\u6d4b\u8bd5\u65f6\u624d\u4f1a\u751f\u6210\u7684\u76ee\u5f55 \u2502\u2500\u2500 difftest\uff1a\u4eff\u771f\u6d4b\u8bd5\u6846\u67b6 \u2502\u2500\u2500 ready-to-run\uff1a\u4eff\u771f\u6d4b\u8bd5\u6587\u4ef6\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 lab1\uff1a\u5305\u542blab1\u76f8\u5173\u7684\u6d4b\u8bd5\u6587\u4ef6\uff0c\u9700\u8981\u5173\u6ce8\u5176\u4e2d\u7684 .S \u6c47\u7f16\u6587\u4ef6 \u2502\u3000\u3000\u2514\u2500\u2500 ... \u2502\u2500\u2500 vivado \u2502\u3000\u3000\u2514\u2500\u2500 test1 \u2502\u3000\u3000\u3000\u3000\u3000\u2514\u2500\u2500 project\uff1avivado\u9879\u76ee\u5de5\u7a0b\u76ee\u5f55 \u2502\u2500\u2500 vsrc\uff1a\u9700\u8981\u5199\u7684CPU\u4ee3\u7801\u6240\u5728\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 include\uff1a\u5934\u6587\u4ef6\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 pipeline \u2502\u3000\u3000\u3000\u3000\u3000\u251c\u2500\u2500 regfile\uff1a\u5bc4\u5b58\u5668\u6587\u4ef6\u76ee\u5f55\uff0c\u5bc4\u5b58\u5668\u7ec4\u6a21\u5757\u5df2\u7ed9\u51fa \u2502\u3000\u3000\u3000\u3000\u3000\u251c\u2500\u2500 execute\uff1a\u6d41\u6c34\u7ebf\u6267\u884c\u9636\u6bb5\u76ee\u5f55\uff0calu\u6a21\u5757\u5df2\u7ed9\u51fa \u2502\u3000\u3000\u3000\u3000\u3000\u2514\u2500\u2500 core.sv\uff1a\u4e94\u7ea7\u6d41\u6c34\u7ebf\u4e3b\u4f53\u4ee3\u7801 \u2502\u3000\u3000\u251c\u2500\u2500 ram\uff1a\u5185\u5b58\u63a7\u5236\u76f8\u5173\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 util\uff1a\u8bbf\u5b58\u63a5\u53e3\u76f8\u5173\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 add_sources.tcl \u2502\u3000\u3000\u251c\u2500\u2500 mycpu_top_nodelay.sv\uff1a\u4ee5\u4e0b\u662f\u9879\u76ee\u5934\u6587\u4ef6 \u2502\u3000\u3000\u251c\u2500\u2500 mycpu_top.sv \u2502\u3000\u3000\u251c\u2500\u2500 SimTop.sv \u2502\u3000\u3000\u2514\u2500\u2500 VTop.sv \u2502\u2500\u2500 xpm_memory\uff1aXilinx\u7684\u5185\u5b58IP \u2502\u2500\u2500 Makefile\uff1a\u4eff\u771f\u6d4b\u8bd5\u7684\u547d\u4ee4\u6c47\u603b \u2502\u2500\u2500 readme.md: \u6b64\u6587\u4ef6 Tips \u00b6 \u8bb0\u5f97\u7528 git pull origin master \u548c git submodule update \u786e\u4fdd\u5df2\u7ecf\u66f4\u65b0\u4e3a\u6700\u65b0\u7248\u672c \u8bf7\u786e\u4fdd verilator \u6d4b\u8bd5\u8fd0\u884c\u5728linux\u73af\u5883\u4e0a \u6709\u95ee\u9898\u53ef\u4ee5\u5148\u6d4f\u89c8\u4e00\u4e0bslack\u548c\u5fae\u4fe1\u7fa4\u4e2d\u7684\u6d88\u606f\u8bb0\u5f55\uff0c\u53ef\u80fd\u5176\u4ed6\u4eba\u4e5f\u9047\u5230\u8fc7\u76f8\u4f3c\u7684\u95ee\u9898 PC\u7684\u8d77\u59cb\u5730\u5740\u4e3a 0x8000_0000 \uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u6761\u6307\u4ee4\u6240\u5728\u7684\u5730\u5740 lab1\u6307\u4ee4\u8bbf\u5b58\u548c\u6570\u636e\u8bbf\u5b58\u90fd\u4f1a\u5728\u5f53\u524d\u5468\u671f\u5c31\u8fd4\u56de\uff08lab1\u7684\u8bbf\u5b58\u6ca1\u6709\u5ef6\u8fdf\uff09 0\u53f7\u5bc4\u5b58\u5668\u7684\u503c\u6052\u4e3a\u96f6\uff08\u611f\u5174\u8da3\u53ef\u4ee5\u770bregfile.sv\u4e2d\u7684\u5b9e\u73b0\uff09 \u6307\u4ee4\u662f32\u4f4d\u800c\u6570\u636e\u3001\u6570\u636e\u5730\u5740\u3001\u6307\u4ee4\u5730\u5740\u90fd\u662f64\u4f4d \u53ef\u4ee5\u5229\u7528 $display \u8fdb\u884c\u6253\u5370\u8c03\u8bd5\uff0c\u6bd4\u5982 always_ff @(posedge clk) begin $display(\"%x\", pc); end \u5982\u4f55\u63d0\u95ee \u00b6 \u6211\u4eec\u975e\u5e38\u613f\u610f\u5e2e\u52a9\u5927\u5bb6\u9ad8\u6548\u89e3\u51b3\u95ee\u9898\uff0c\u540c\u65f6\u53c8\u5e0c\u671b\u5927\u5bb6\u80fd\u6293\u4f4f\u6bcf\u4e00\u6b21\u953b\u70bc\u81ea\u5df1\u5584\u7528\u5404\u79cd\u8d44\u6e90\u4ee5\u53ca\u83b7\u5f97\u610f\u5916\u60ca\u559c\u7684\u673a\u4f1a\u3002\u56e0\u6b64\u6211\u4eec\u7ed9\u51fa\u4ee5\u4e0b\u51e0\u70b9\u5efa\u8bae\uff0c\u66f4\u5b8c\u6574\u7684\u90e8\u5206\u53ef\u4ee5\u5728 \u63d0\u95ee\u7684\u667a\u6167 \u4e2d\u4ed4\u7ec6\u9605\u8bfb\uff1a \u8bf7\u786e\u4fdd\u5728\u6709\u5145\u8db3\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\u5584\u7528\u641c\u7d22\u5f15\u64ce\u3001\u7f51\u7ad9\u8d44\u6599\u4ee5\u53ca\u4ea4\u6d41\u5e73\u53f0\u7b49\u8d44\u6e90\uff0c\u770b\u770b\u662f\u5426\u5176\u4ed6\u4eba\u4e5f\u9047\u5230\u4e86\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u5e76\u8fdb\u884c\u89e3\u51b3\u95ee\u9898\u7684\u5c1d\u8bd5\u3002 \u9996\u5148\u8bf4\u660e\u4f60\u6240\u4f7f\u7528\u7684\u5e73\u53f0\u4ee5\u53ca\u7248\u672c\uff0c\u5982 WSL / MacOS / Linux\u7b49\u3002 \u7528\u5c3d\u53ef\u80fd\u7b80\u77ed\u4f46\u662f\u6e05\u6670\u7684\u8bed\u8a00\u63cf\u8ff0\u4f60\u6240\u9047\u5230\u7684\u95ee\u9898\uff0c\u4ece\u6838\u5fc3\u95ee\u9898\u51fa\u53d1\uff0c\u8865\u5145\u8bf4\u660e\u9700\u8981\u7684\u524d\u7f6e\u80cc\u666f\u5373\u53ef\u3002 \u53ef\u4ee5\u8bf4\u660e\u81ea\u5df1\u5c1d\u8bd5\u8fc7\u7684\u640f\u6597\uff0c\u53ef\u80fd\u4f46\u662f\u7531\u4e8e\u5404\u79cd\u539f\u56e0\u6ca1\u6709\u5c1d\u8bd5\u7684\u60f3\u6cd5\u7b49\uff0c\u8fd0\u7528\u7ecf\u9a8c\u89e3\u51b3\u95ee\u9898\u6709\u65f6\u9700\u8981\u53d1\u6325\u60f3\u8c61\u529b\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u540c\u5b66\u4eec\u4e00\u8d77\u5e2e\u52a9\u9677\u5165\u74f6\u9888\u7684\u540c\u5b66\uff08 \u52a9\u6559\u4e5f\u662f\u8fc7\u6765\u4eba \uff09\uff0c\u5e2e\u52a9\u5176\u4ed6\u4eba\u6392\u9664\u969c\u788d\u7edd\u975e\u6d6a\u8d39\u65f6\u95f4\uff0c\u800c\u662f\u4e00\u79cd\u6559\u5b66\u76f8\u957f\uff01 \u4e00\u4e9b\u9898\u5916\u8bdd \u00b6 \u6211\u4eec\u4e0d\u9f13\u52b1\u5185\u5377\uff0c\u771f\u5fc3\u5e0c\u671b\u5927\u5bb6\u80fd\u901a\u8fc7\u8fd9\u95e8\u8bfe\u5b66\u4e60\u5230\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u4f53\u7cfb\u7ed3\u6784\u76f8\u5173\u7684\u77e5\u8bc6\u3002 \u5f53\u7136\u53ea\u8981\u662f\u5b66\u751f\u5c31\u90fd\u4f1a\u5173\u5fc3\u6210\u7ee9\uff0c\u6240\u4ee5\u52a9\u6559\u5728\u6b64\u5411\u5927\u5bb6\u58f0\u660e\uff0c\u53ea\u8981\u7528\u5fc3\u5b66\uff0c\u6210\u7ee9\u4e00\u5b9a\u4e0d\u4f1a\u5dee :)\uff0c\u6577\u884d\u4e86\u4e8b\u8005\u81ea\u662f\u81ea\u98df\u5176\u679c\u3002 \u82e5\u6709\u4efb\u4f55\u5173\u4e8e\u8bfe\u5802\u6216\u662f\u8bfe\u7a0b\u7684\u60f3\u6cd5\uff0c\u90fd\u5f88\u6b22\u8fce\u8054\u7cfb\u8001\u5e08\u6216\u52a9\u6559\u63d0\u51fa\uff0cslack / \u5fae\u4fe1 / \u90ae\u7bb1\u5747\u53ef\uff0c\u6211\u4eec\u4f1a\u8ba4\u771f\u56de\u590d\u3002 \u795d\u540c\u5b66\u4eec\u8fd9\u4e00\u5b66\u671f\u8fc7\u7684\u5145\u5b9e\u6109\u5feb\uff0c\u5b66\u6709\u6240\u6210~\uff01","title":"\u5b9e\u9a8c\u987b\u77e5"},{"location":"%E5%AE%9E%E9%AA%8C%E9%A1%BB%E7%9F%A5/#_1","text":"Arch-2022Sping-FDU \u2502\u2500\u2500 build\uff1a\u4eff\u771f\u6d4b\u8bd5\u65f6\u624d\u4f1a\u751f\u6210\u7684\u76ee\u5f55 \u2502\u2500\u2500 difftest\uff1a\u4eff\u771f\u6d4b\u8bd5\u6846\u67b6 \u2502\u2500\u2500 ready-to-run\uff1a\u4eff\u771f\u6d4b\u8bd5\u6587\u4ef6\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 lab1\uff1a\u5305\u542blab1\u76f8\u5173\u7684\u6d4b\u8bd5\u6587\u4ef6\uff0c\u9700\u8981\u5173\u6ce8\u5176\u4e2d\u7684 .S \u6c47\u7f16\u6587\u4ef6 \u2502\u3000\u3000\u2514\u2500\u2500 ... \u2502\u2500\u2500 vivado \u2502\u3000\u3000\u2514\u2500\u2500 test1 \u2502\u3000\u3000\u3000\u3000\u3000\u2514\u2500\u2500 project\uff1avivado\u9879\u76ee\u5de5\u7a0b\u76ee\u5f55 \u2502\u2500\u2500 vsrc\uff1a\u9700\u8981\u5199\u7684CPU\u4ee3\u7801\u6240\u5728\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 include\uff1a\u5934\u6587\u4ef6\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 pipeline \u2502\u3000\u3000\u3000\u3000\u3000\u251c\u2500\u2500 regfile\uff1a\u5bc4\u5b58\u5668\u6587\u4ef6\u76ee\u5f55\uff0c\u5bc4\u5b58\u5668\u7ec4\u6a21\u5757\u5df2\u7ed9\u51fa \u2502\u3000\u3000\u3000\u3000\u3000\u251c\u2500\u2500 execute\uff1a\u6d41\u6c34\u7ebf\u6267\u884c\u9636\u6bb5\u76ee\u5f55\uff0calu\u6a21\u5757\u5df2\u7ed9\u51fa \u2502\u3000\u3000\u3000\u3000\u3000\u2514\u2500\u2500 core.sv\uff1a\u4e94\u7ea7\u6d41\u6c34\u7ebf\u4e3b\u4f53\u4ee3\u7801 \u2502\u3000\u3000\u251c\u2500\u2500 ram\uff1a\u5185\u5b58\u63a7\u5236\u76f8\u5173\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 util\uff1a\u8bbf\u5b58\u63a5\u53e3\u76f8\u5173\u76ee\u5f55 \u2502\u3000\u3000\u251c\u2500\u2500 add_sources.tcl \u2502\u3000\u3000\u251c\u2500\u2500 mycpu_top_nodelay.sv\uff1a\u4ee5\u4e0b\u662f\u9879\u76ee\u5934\u6587\u4ef6 \u2502\u3000\u3000\u251c\u2500\u2500 mycpu_top.sv \u2502\u3000\u3000\u251c\u2500\u2500 SimTop.sv \u2502\u3000\u3000\u2514\u2500\u2500 VTop.sv \u2502\u2500\u2500 xpm_memory\uff1aXilinx\u7684\u5185\u5b58IP \u2502\u2500\u2500 Makefile\uff1a\u4eff\u771f\u6d4b\u8bd5\u7684\u547d\u4ee4\u6c47\u603b \u2502\u2500\u2500 readme.md: \u6b64\u6587\u4ef6","title":"\u5b9e\u9a8c\u4ed3\u5e93\u7ed3\u6784"},{"location":"%E5%AE%9E%E9%AA%8C%E9%A1%BB%E7%9F%A5/#tips","text":"\u8bb0\u5f97\u7528 git pull origin master \u548c git submodule update \u786e\u4fdd\u5df2\u7ecf\u66f4\u65b0\u4e3a\u6700\u65b0\u7248\u672c \u8bf7\u786e\u4fdd verilator \u6d4b\u8bd5\u8fd0\u884c\u5728linux\u73af\u5883\u4e0a \u6709\u95ee\u9898\u53ef\u4ee5\u5148\u6d4f\u89c8\u4e00\u4e0bslack\u548c\u5fae\u4fe1\u7fa4\u4e2d\u7684\u6d88\u606f\u8bb0\u5f55\uff0c\u53ef\u80fd\u5176\u4ed6\u4eba\u4e5f\u9047\u5230\u8fc7\u76f8\u4f3c\u7684\u95ee\u9898 PC\u7684\u8d77\u59cb\u5730\u5740\u4e3a 0x8000_0000 \uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u6761\u6307\u4ee4\u6240\u5728\u7684\u5730\u5740 lab1\u6307\u4ee4\u8bbf\u5b58\u548c\u6570\u636e\u8bbf\u5b58\u90fd\u4f1a\u5728\u5f53\u524d\u5468\u671f\u5c31\u8fd4\u56de\uff08lab1\u7684\u8bbf\u5b58\u6ca1\u6709\u5ef6\u8fdf\uff09 0\u53f7\u5bc4\u5b58\u5668\u7684\u503c\u6052\u4e3a\u96f6\uff08\u611f\u5174\u8da3\u53ef\u4ee5\u770bregfile.sv\u4e2d\u7684\u5b9e\u73b0\uff09 \u6307\u4ee4\u662f32\u4f4d\u800c\u6570\u636e\u3001\u6570\u636e\u5730\u5740\u3001\u6307\u4ee4\u5730\u5740\u90fd\u662f64\u4f4d \u53ef\u4ee5\u5229\u7528 $display \u8fdb\u884c\u6253\u5370\u8c03\u8bd5\uff0c\u6bd4\u5982 always_ff @(posedge clk) begin $display(\"%x\", pc); end","title":"Tips"},{"location":"%E5%AE%9E%E9%AA%8C%E9%A1%BB%E7%9F%A5/#_2","text":"\u6211\u4eec\u975e\u5e38\u613f\u610f\u5e2e\u52a9\u5927\u5bb6\u9ad8\u6548\u89e3\u51b3\u95ee\u9898\uff0c\u540c\u65f6\u53c8\u5e0c\u671b\u5927\u5bb6\u80fd\u6293\u4f4f\u6bcf\u4e00\u6b21\u953b\u70bc\u81ea\u5df1\u5584\u7528\u5404\u79cd\u8d44\u6e90\u4ee5\u53ca\u83b7\u5f97\u610f\u5916\u60ca\u559c\u7684\u673a\u4f1a\u3002\u56e0\u6b64\u6211\u4eec\u7ed9\u51fa\u4ee5\u4e0b\u51e0\u70b9\u5efa\u8bae\uff0c\u66f4\u5b8c\u6574\u7684\u90e8\u5206\u53ef\u4ee5\u5728 \u63d0\u95ee\u7684\u667a\u6167 \u4e2d\u4ed4\u7ec6\u9605\u8bfb\uff1a \u8bf7\u786e\u4fdd\u5728\u6709\u5145\u8db3\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\u5584\u7528\u641c\u7d22\u5f15\u64ce\u3001\u7f51\u7ad9\u8d44\u6599\u4ee5\u53ca\u4ea4\u6d41\u5e73\u53f0\u7b49\u8d44\u6e90\uff0c\u770b\u770b\u662f\u5426\u5176\u4ed6\u4eba\u4e5f\u9047\u5230\u4e86\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u5e76\u8fdb\u884c\u89e3\u51b3\u95ee\u9898\u7684\u5c1d\u8bd5\u3002 \u9996\u5148\u8bf4\u660e\u4f60\u6240\u4f7f\u7528\u7684\u5e73\u53f0\u4ee5\u53ca\u7248\u672c\uff0c\u5982 WSL / MacOS / Linux\u7b49\u3002 \u7528\u5c3d\u53ef\u80fd\u7b80\u77ed\u4f46\u662f\u6e05\u6670\u7684\u8bed\u8a00\u63cf\u8ff0\u4f60\u6240\u9047\u5230\u7684\u95ee\u9898\uff0c\u4ece\u6838\u5fc3\u95ee\u9898\u51fa\u53d1\uff0c\u8865\u5145\u8bf4\u660e\u9700\u8981\u7684\u524d\u7f6e\u80cc\u666f\u5373\u53ef\u3002 \u53ef\u4ee5\u8bf4\u660e\u81ea\u5df1\u5c1d\u8bd5\u8fc7\u7684\u640f\u6597\uff0c\u53ef\u80fd\u4f46\u662f\u7531\u4e8e\u5404\u79cd\u539f\u56e0\u6ca1\u6709\u5c1d\u8bd5\u7684\u60f3\u6cd5\u7b49\uff0c\u8fd0\u7528\u7ecf\u9a8c\u89e3\u51b3\u95ee\u9898\u6709\u65f6\u9700\u8981\u53d1\u6325\u60f3\u8c61\u529b\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u975e\u5e38\u6b22\u8fce\u540c\u5b66\u4eec\u4e00\u8d77\u5e2e\u52a9\u9677\u5165\u74f6\u9888\u7684\u540c\u5b66\uff08 \u52a9\u6559\u4e5f\u662f\u8fc7\u6765\u4eba \uff09\uff0c\u5e2e\u52a9\u5176\u4ed6\u4eba\u6392\u9664\u969c\u788d\u7edd\u975e\u6d6a\u8d39\u65f6\u95f4\uff0c\u800c\u662f\u4e00\u79cd\u6559\u5b66\u76f8\u957f\uff01","title":"\u5982\u4f55\u63d0\u95ee"},{"location":"%E5%AE%9E%E9%AA%8C%E9%A1%BB%E7%9F%A5/#_3","text":"\u6211\u4eec\u4e0d\u9f13\u52b1\u5185\u5377\uff0c\u771f\u5fc3\u5e0c\u671b\u5927\u5bb6\u80fd\u901a\u8fc7\u8fd9\u95e8\u8bfe\u5b66\u4e60\u5230\u8ba1\u7b97\u673a\u7ec4\u6210\u4e0e\u4f53\u7cfb\u7ed3\u6784\u76f8\u5173\u7684\u77e5\u8bc6\u3002 \u5f53\u7136\u53ea\u8981\u662f\u5b66\u751f\u5c31\u90fd\u4f1a\u5173\u5fc3\u6210\u7ee9\uff0c\u6240\u4ee5\u52a9\u6559\u5728\u6b64\u5411\u5927\u5bb6\u58f0\u660e\uff0c\u53ea\u8981\u7528\u5fc3\u5b66\uff0c\u6210\u7ee9\u4e00\u5b9a\u4e0d\u4f1a\u5dee :)\uff0c\u6577\u884d\u4e86\u4e8b\u8005\u81ea\u662f\u81ea\u98df\u5176\u679c\u3002 \u82e5\u6709\u4efb\u4f55\u5173\u4e8e\u8bfe\u5802\u6216\u662f\u8bfe\u7a0b\u7684\u60f3\u6cd5\uff0c\u90fd\u5f88\u6b22\u8fce\u8054\u7cfb\u8001\u5e08\u6216\u52a9\u6559\u63d0\u51fa\uff0cslack / \u5fae\u4fe1 / \u90ae\u7bb1\u5747\u53ef\uff0c\u6211\u4eec\u4f1a\u8ba4\u771f\u56de\u590d\u3002 \u795d\u540c\u5b66\u4eec\u8fd9\u4e00\u5b66\u671f\u8fc7\u7684\u5145\u5b9e\u6109\u5feb\uff0c\u5b66\u6709\u6240\u6210~\uff01","title":"\u4e00\u4e9b\u9898\u5916\u8bdd"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","text":"\u5e38\u89c1\u95ee\u9898 \u00b6 \u5efa\u8bae\u6839\u636e \u53f3\u8fb9\u680f \u8fdb\u884c\u7d22\u5f15 0 \u73af\u5883\u914d\u7f6e \u00b6 \u4e0b\u8f7dverilator\u65f6\uff0c make -j12 \u540e\u6b7b\u673a \u00b6 \u53ef\u4ee5\u4f7f\u7528 make -j4 \u6216\u8005\u76f4\u63a5 make \uff0c\u5982\u679c\u4f7f\u7528\u7684\u662f\u865a\u62df\u673a\uff0c\u5efa\u8bae\u66f4\u65b0vmware\u81f316.0\u7248\u672c 1 \u6d41\u6c34\u7ebf\u76f8\u5173 \u00b6 Decode \u548c Writeback \u51b2\u7a81 \u00b6 \u91c7\u7528\u8f6c\u53d1\u6216\u963b\u585e\u6765\u89e3\u51b3\u3002\u4e0d\u5141\u8bb8\u4f7f\u7528\u4e0b\u964d\u6cbf\uff01 2 Verilator\u4eff\u771f \u00b6 mepc / invalid paddr 0x23333000 \u00b6 \u6309\u7167\u5b9e\u9a8c\u6d4b\u8bd5\u4e2d\u7684 \u63a5\u5165Verilator\u4eff\u771f \u90e8\u5206\u63a5\u5165skip \u6d41\u6c34\u7ebf\u7684 Commit Instr Valid \u00b6 \u5355\u5468\u671f\u91cc\uff0c\u6bcf\u4e2a\u5468\u671f\u80fd\u6267\u884c\u6307\u4ee4\uff0c\u6240\u4ee5 .valid(~reset) \u5c31\u53ef\u4ee5\uff1b\u6d41\u6c34\u7ebf\u91cc\u5219\u4e0d\u662f\u8fd9\u6837\uff0c\u9700\u8981\u5728 dataF, dataD, ... \u91cc\u52a0\u4e00\u4e2a valid \u4fe1\u53f7\uff1a assign dataF.valid = '1; if (reset | flush) dataD <= '0; ld \u6307\u4ee4\u5730\u5740\u6b63\u786e\uff0c\u4f46\u6570\u636e\u9519\u8bef\uff0c \u00b6 \u53ef\u80fd\u662f\u4e4b\u524d\u7684 sd \u6307\u4ee4\u6ca1\u6709\u7ed9 strobe \u6b63\u786e\u8d4b\u503c\u3002 \u8bfb \u5199 \u5176\u5b83\u6307\u4ee4 valid '1 '1 '0 strobe '0 '1' '0 1\u79d2\u4ee5\u4e0a\u4e0d\u9000\u51fa \u00b6 \u53ef\u4ee5\u91c7\u53d6\u8fd9\u79cd\u8c03\u8bd5\u65b9\u6cd5\uff0c\u9047\u5230\u672a\u77e5\u7684\u6307\u4ee4\uff0c\u6240\u6709\u63a7\u5236\u4fe1\u53f7\u53d60 always_ff @( posedge clk ) begin $display ( \"%x\" , ireq . addr ); end Warning-UNOPTFLAT ....Signal unoptimizable \u00b6 verilator\u5224\u65ad\u51fa\u73b0\u4e86\u7ec4\u5408\u903b\u8f91\u73af\uff0c\u4e3b\u8981\u7684\u53ef\u80fd\u662f\u56e0\u4e3averilator\u628adreq\u7b49 struct \u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\u6765\u8d4b\u503c\uff0c\u8fdb\u800c\u4f18\u5316\u6027\u80fd\uff0c\u800c\u56e0\u6b64\u7ed3\u6784\u4f53\u5185\u90e8\u5143\u7d20\u7684\u8d4b\u503c\u5728 verilator \u770b\u6765\u53ef\u80fd\u4f1a\u76f8\u4e92\u5e72\u6270\uff0c\u8bf7\u5148\u6309\u7167\u5b83\u7ed9\u51fa\u7684\u63d0\u793a\u4fe1\u606f\u6392\u67e5\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u53bb\u5e74\u7684\u6587\u6863https://fducslg.github.io/ICS-2021Spring-FDU/misc/unopt.html \u62a5\u9519 module decls within module decls \u00b6 \u8bed\u6cd5\u9519\u8bef\uff0c\u5c11\u4e86endmodule \u6d4b\u8bd5\u7684\u4ee3\u7801\u5728\u54ea\u91cc\u770b\uff1f \u00b6 \u6d4b\u8bd5\u7684\u4ee3\u7801\u6587\u4ef6\u5728 ready-to-run \u4e0b\uff0c\u5bf9\u5e94\u7684.s\u6587\u4ef6\u6709\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5176\u4e2d\u5730\u5740\u90e8\u5206\u662f\u6587\u4ef6\u5185\u504f\u79fb\u91cf\uff0c\u9700\u8981\u52a0\u4e0a 0x8000_0000 \u624d\u662f\u6267\u884c\u65f6\u7684\u5730\u5740 /usr/bin/sh: time: command not found \u00b6 \u67e5\u770b\u63d0\u793a\u4fe1\u606f\u4e2d\u662f\u5426\u5305\u542b mingw/mingw32 \u7b49\u5b57\u6837\uff0c\u5982\u679c\u6709\u7684\u8bdd\u8868\u660e\u8fd9\u4e2a\u662f\u5728windows\u4e0b\u9762\u76f4\u63a5 make \u4e86\uff0c\u8bf7\u6362\u5230linux\u73af\u5883\u4e0b\u518d make make test \u540e\u51fa\u73b0\u4e86ifdef not terminated at EOF\uff1f \u00b6 \u67e5\u770b\u5199\u7684\u6bcf\u4e00\u4e2a sv \u6587\u4ef6\uff0c\u786e\u4fdd\u5176\u4e2d\u7684 ifdef/ifndef \u548c endif \u4e00\u4e00\u5bf9\u5e94\u3002 \u6d4b\u8bd5\u4e4b\u540e\u62a5\u9519 No instruction commits for 5000 cycles of core 0. Please check the first instruction. \u00b6 \u8bf7\u5148\u786e\u4fdd\u5199\u56de\u9636\u6bb5\u7684\u63a5\u53e3\u4e0edifftest\u7684\u6d4b\u8bd5\u6846\u67b6\u76f8\u8fde\u5e76\u4e14\u6240\u6709\u7684 sv \u6587\u4ef6\u90fd\u5df2\u4fdd\u5b58\uff0c\u7136\u540e\u8fd0\u884c make clean \u540e\u518d make \u5bf9\u5e94\u7684\u6d4b\u8bd5 \u672a\u627e\u5230\u5934\u6587\u4ef6 No such file or directory \u6bd4\u5982 SDL2 \u00b6 \u8fd9\u662f\u56e0\u4e3a difftest \u4f9d\u8d56\u4e00\u4e9b\u5e93\uff0c\u53ef\u4ee5\u5c1d\u8bd5 sudo apt install libsdl2-dev zlib1g-dev \uff0c\u82e5\u8fd8\u662f\u4e0d\u884c\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 apt search SDL2 \u67e5\u627e\u53ef\u80fd\u9700\u8981\u7684\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u8fdb\u884c\u5b89\u88c5\u3002 Can't find definition of *** \u00b6 \u786e\u4fdd\u6240\u5728\u6587\u4ef6\u5728 ifdef verilator \u548c else \u4e4b\u95f4\u7684\u90e8\u5206\u4e2d include\u4e86\u6a21\u5757\u6240\u5728\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u5f15\u7528\u7684\u8def\u5f84\u662f\u6b63\u786e\u7684\uff1b\u540c\u65f6\u6b63\u786e\u4f8b\u5316\u6a21\u5757 module_name variable_name ( //\u5efa\u8baemodule_name \u548c variable_name\u4e00\u81f4 . clk ( clk ), .... ); spike-dasm: command not found \u00b6 \u6ca1\u6709\u5f71\u54cd\uff0c\u53ef\u4ee5\u4e0d\u7ba1 3 Vivado \u00b6 \u8bf7\u786e\u4fdd\u7528 vivado.2018.3 \u4eff\u771f\u6ca1\u6709\u6ce2\u5f62 \u00b6 Tools->Settings->Simulation->Simulation->log_all_signals \u8bbe\u7f6e\u4e3a1\uff0c\u91cd\u542f Vivado\u3002 \u4e24\u4e2a\u4eff\u771f\u901a\u8fc7\uff0c\u4e0a\u677f\u65e0\u73b0\u8c61 \u00b6 Generate Bitstream -> Open Implemented Design -> Check Timing \uff0c\u89e3\u51b3\u6240\u6709 No clock \u4fe1\u53f7\u3002 \u600e\u4e48\u5728vivado\u4e2d\u6dfb\u52a0\u6e90\u6587\u4ef6\uff1f \u00b6 \u8fd0\u884ctools\u9009\u9879\u4e0b\u7684 Run Tcl script \uff0c\u8fd0\u884c vsrc\\add_sources.tcl \u548c vivado\\src\\add_sources.tcl \u6dfb\u52a0\u5373\u53ef\u3002","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#_1","text":"\u5efa\u8bae\u6839\u636e \u53f3\u8fb9\u680f \u8fdb\u884c\u7d22\u5f15","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#0","text":"","title":"0 \u73af\u5883\u914d\u7f6e"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#verilatormake-j12","text":"\u53ef\u4ee5\u4f7f\u7528 make -j4 \u6216\u8005\u76f4\u63a5 make \uff0c\u5982\u679c\u4f7f\u7528\u7684\u662f\u865a\u62df\u673a\uff0c\u5efa\u8bae\u66f4\u65b0vmware\u81f316.0\u7248\u672c","title":"\u4e0b\u8f7dverilator\u65f6\uff0cmake -j12\u540e\u6b7b\u673a"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#1","text":"","title":"1 \u6d41\u6c34\u7ebf\u76f8\u5173"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#decode-writeback","text":"\u91c7\u7528\u8f6c\u53d1\u6216\u963b\u585e\u6765\u89e3\u51b3\u3002\u4e0d\u5141\u8bb8\u4f7f\u7528\u4e0b\u964d\u6cbf\uff01","title":"Decode \u548c Writeback \u51b2\u7a81"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#2-verilator","text":"","title":"2 Verilator\u4eff\u771f"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#mepc-invalid-paddr-0x23333000","text":"\u6309\u7167\u5b9e\u9a8c\u6d4b\u8bd5\u4e2d\u7684 \u63a5\u5165Verilator\u4eff\u771f \u90e8\u5206\u63a5\u5165skip","title":"mepc / invalid paddr 0x23333000"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#commit-instr-valid","text":"\u5355\u5468\u671f\u91cc\uff0c\u6bcf\u4e2a\u5468\u671f\u80fd\u6267\u884c\u6307\u4ee4\uff0c\u6240\u4ee5 .valid(~reset) \u5c31\u53ef\u4ee5\uff1b\u6d41\u6c34\u7ebf\u91cc\u5219\u4e0d\u662f\u8fd9\u6837\uff0c\u9700\u8981\u5728 dataF, dataD, ... \u91cc\u52a0\u4e00\u4e2a valid \u4fe1\u53f7\uff1a assign dataF.valid = '1; if (reset | flush) dataD <= '0;","title":"\u6d41\u6c34\u7ebf\u7684 Commit Instr Valid"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#ld","text":"\u53ef\u80fd\u662f\u4e4b\u524d\u7684 sd \u6307\u4ee4\u6ca1\u6709\u7ed9 strobe \u6b63\u786e\u8d4b\u503c\u3002 \u8bfb \u5199 \u5176\u5b83\u6307\u4ee4 valid '1 '1 '0 strobe '0 '1' '0","title":"ld \u6307\u4ee4\u5730\u5740\u6b63\u786e\uff0c\u4f46\u6570\u636e\u9519\u8bef\uff0c"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#1_1","text":"\u53ef\u4ee5\u91c7\u53d6\u8fd9\u79cd\u8c03\u8bd5\u65b9\u6cd5\uff0c\u9047\u5230\u672a\u77e5\u7684\u6307\u4ee4\uff0c\u6240\u6709\u63a7\u5236\u4fe1\u53f7\u53d60 always_ff @( posedge clk ) begin $display ( \"%x\" , ireq . addr ); end","title":"1\u79d2\u4ee5\u4e0a\u4e0d\u9000\u51fa"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#warning-unoptflat-signal-unoptimizable","text":"verilator\u5224\u65ad\u51fa\u73b0\u4e86\u7ec4\u5408\u903b\u8f91\u73af\uff0c\u4e3b\u8981\u7684\u53ef\u80fd\u662f\u56e0\u4e3averilator\u628adreq\u7b49 struct \u89c6\u4e3a\u4e00\u4e2a\u6574\u4f53\u6765\u8d4b\u503c\uff0c\u8fdb\u800c\u4f18\u5316\u6027\u80fd\uff0c\u800c\u56e0\u6b64\u7ed3\u6784\u4f53\u5185\u90e8\u5143\u7d20\u7684\u8d4b\u503c\u5728 verilator \u770b\u6765\u53ef\u80fd\u4f1a\u76f8\u4e92\u5e72\u6270\uff0c\u8bf7\u5148\u6309\u7167\u5b83\u7ed9\u51fa\u7684\u63d0\u793a\u4fe1\u606f\u6392\u67e5\uff0c\u4e5f\u53ef\u4ee5\u53c2\u8003\u53bb\u5e74\u7684\u6587\u6863https://fducslg.github.io/ICS-2021Spring-FDU/misc/unopt.html","title":"Warning-UNOPTFLAT ....Signal unoptimizable"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#module-decls-within-module-decls","text":"\u8bed\u6cd5\u9519\u8bef\uff0c\u5c11\u4e86endmodule","title":"\u62a5\u9519 module decls within module decls"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#_2","text":"\u6d4b\u8bd5\u7684\u4ee3\u7801\u6587\u4ef6\u5728 ready-to-run \u4e0b\uff0c\u5bf9\u5e94\u7684.s\u6587\u4ef6\u6709\u6267\u884c\u7684\u6307\u4ee4\uff0c\u5176\u4e2d\u5730\u5740\u90e8\u5206\u662f\u6587\u4ef6\u5185\u504f\u79fb\u91cf\uff0c\u9700\u8981\u52a0\u4e0a 0x8000_0000 \u624d\u662f\u6267\u884c\u65f6\u7684\u5730\u5740","title":"\u6d4b\u8bd5\u7684\u4ee3\u7801\u5728\u54ea\u91cc\u770b\uff1f"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#usrbinsh-time-command-not-found","text":"\u67e5\u770b\u63d0\u793a\u4fe1\u606f\u4e2d\u662f\u5426\u5305\u542b mingw/mingw32 \u7b49\u5b57\u6837\uff0c\u5982\u679c\u6709\u7684\u8bdd\u8868\u660e\u8fd9\u4e2a\u662f\u5728windows\u4e0b\u9762\u76f4\u63a5 make \u4e86\uff0c\u8bf7\u6362\u5230linux\u73af\u5883\u4e0b\u518d make","title":"/usr/bin/sh: time: command not found"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#make-testifdef-not-terminated-at-eof","text":"\u67e5\u770b\u5199\u7684\u6bcf\u4e00\u4e2a sv \u6587\u4ef6\uff0c\u786e\u4fdd\u5176\u4e2d\u7684 ifdef/ifndef \u548c endif \u4e00\u4e00\u5bf9\u5e94\u3002","title":"make test\u540e\u51fa\u73b0\u4e86ifdef not terminated at EOF\uff1f"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#no-instruction-commits-for-5000-cycles-of-core-0-please-check-the-first-instruction","text":"\u8bf7\u5148\u786e\u4fdd\u5199\u56de\u9636\u6bb5\u7684\u63a5\u53e3\u4e0edifftest\u7684\u6d4b\u8bd5\u6846\u67b6\u76f8\u8fde\u5e76\u4e14\u6240\u6709\u7684 sv \u6587\u4ef6\u90fd\u5df2\u4fdd\u5b58\uff0c\u7136\u540e\u8fd0\u884c make clean \u540e\u518d make \u5bf9\u5e94\u7684\u6d4b\u8bd5","title":"\u6d4b\u8bd5\u4e4b\u540e\u62a5\u9519 No instruction commits for 5000 cycles of core 0. Please check the first instruction."},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#no-such-file-or-directory-sdl2","text":"\u8fd9\u662f\u56e0\u4e3a difftest \u4f9d\u8d56\u4e00\u4e9b\u5e93\uff0c\u53ef\u4ee5\u5c1d\u8bd5 sudo apt install libsdl2-dev zlib1g-dev \uff0c\u82e5\u8fd8\u662f\u4e0d\u884c\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u7528 apt search SDL2 \u67e5\u627e\u53ef\u80fd\u9700\u8981\u7684\u5e93\u6587\u4ef6\uff0c\u7136\u540e\u8fdb\u884c\u5b89\u88c5\u3002","title":"\u672a\u627e\u5230\u5934\u6587\u4ef6No such file or directory \u6bd4\u5982 SDL2"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#cant-find-definition-of","text":"\u786e\u4fdd\u6240\u5728\u6587\u4ef6\u5728 ifdef verilator \u548c else \u4e4b\u95f4\u7684\u90e8\u5206\u4e2d include\u4e86\u6a21\u5757\u6240\u5728\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u5f15\u7528\u7684\u8def\u5f84\u662f\u6b63\u786e\u7684\uff1b\u540c\u65f6\u6b63\u786e\u4f8b\u5316\u6a21\u5757 module_name variable_name ( //\u5efa\u8baemodule_name \u548c variable_name\u4e00\u81f4 . clk ( clk ), .... );","title":"Can't find definition of ***"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#spike-dasm-command-not-found","text":"\u6ca1\u6709\u5f71\u54cd\uff0c\u53ef\u4ee5\u4e0d\u7ba1","title":"spike-dasm: command not found"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#3-vivado","text":"\u8bf7\u786e\u4fdd\u7528 vivado.2018.3","title":"3 Vivado"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#_3","text":"Tools->Settings->Simulation->Simulation->log_all_signals \u8bbe\u7f6e\u4e3a1\uff0c\u91cd\u542f Vivado\u3002","title":"\u4eff\u771f\u6ca1\u6709\u6ce2\u5f62"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#_4","text":"Generate Bitstream -> Open Implemented Design -> Check Timing \uff0c\u89e3\u51b3\u6240\u6709 No clock \u4fe1\u53f7\u3002","title":"\u4e24\u4e2a\u4eff\u771f\u901a\u8fc7\uff0c\u4e0a\u677f\u65e0\u73b0\u8c61"},{"location":"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/#vivado","text":"\u8fd0\u884ctools\u9009\u9879\u4e0b\u7684 Run Tcl script \uff0c\u8fd0\u884c vsrc\\add_sources.tcl \u548c vivado\\src\\add_sources.tcl \u6dfb\u52a0\u5373\u53ef\u3002","title":"\u600e\u4e48\u5728vivado\u4e2d\u6dfb\u52a0\u6e90\u6587\u4ef6\uff1f"},{"location":"%E6%96%87%E6%A1%A3%E5%8B%98%E8%AF%AF/","text":"RISC-V\u4e2d\u6587\u6587\u6863 \u00b6 P151\uff1ajalr\u6307\u4ee4\u768414-12\u4f4d\u5e94\u8be5\u662f 000\uff0c\u800c\u4e0d\u662f 010 \uff0c\u8be6\u89c1P27\u9875\u4e0a\u7684\u6307\u4ee4","title":"\u6587\u6863\u52d8\u8bef"},{"location":"%E6%96%87%E6%A1%A3%E5%8B%98%E8%AF%AF/#risc-v","text":"P151\uff1ajalr\u6307\u4ee4\u768414-12\u4f4d\u5e94\u8be5\u662f 000\uff0c\u800c\u4e0d\u662f 010 \uff0c\u8be6\u89c1P27\u9875\u4e0a\u7684\u6307\u4ee4","title":"RISC-V\u4e2d\u6587\u6587\u6863"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82/","text":"\u6982\u8981 \u00b6 lab1-a \u00b6 \u4eff\u771f\uff1a make test-lab1a \u6587\u4ef6\uff1a lab1-test-a.* \u6307\u4ee4\uff1a addi xori ori andi lui jal beq ld sd lab1 \u00b6 \u4eff\u771f\uff1a make test-lab1 \u6587\u4ef6\uff1a lab1-test.* \u6307\u4ee4\uff1a\u5728\u7b80\u5316\u7248\u57fa\u7840\u4e0a\u589e\u52a0 add sub and or xor auipc jalr \u6ce8\u610f\u4e8b\u9879 \u00b6 verilator\u4eff\u771f\u8f93\u51fa hit good trap \u5373\u7b97\u901a\u8fc7\uff0c\u540e\u7eed\u53ef\u4ee5\u4e0d\u7ba1 \u4e0a\u677f\u548cvivado\u4eff\u771f\u90fd\u4f1a\u8f93\u51fa hello world\uff0c\u6700\u540e\u5728\u8df3\u8f6c\u81ea\u5df1\u7684\u6307\u4ee4\u5904\u6b7b\u5faa\u73af \u6c47\u7f16\u4ee3\u7801 # \u540e\u7684\u6ce8\u91ca\u6709bug\uff0c\u7ed3\u679c\u4e0d\u4e00\u5b9a\u51c6\u786e\uff0c\u4ee5\u5b9e\u9645\u7684\u6307\u4ee4\u4e3a\u51c6 RISC-V\u67b6\u6784\u7684\u5185\u5b58\u5730\u5740\u57280x8000_0000\u4e4b\u4e0a(addr[31]=1)\uff1b\u5916\u8bbe\u5730\u5740\u57280x8000_0000\u4e4b\u4e0b(addr[31]=0)CPU\u8fd0\u884c\u7684\u7a0b\u5e8f\u6700\u540e\u4f1a\u8f93\u51fa hello world \u81f3\u4e32\u53e3\u5916\u8bbe\u7684\u5730\u5740\uff0c\u6240\u4ee5\u4e0a\u677f\u53ef\u4ee5\u770b\u5230\u4e32\u53e3\u6253\u5370\u51fa hello world\u3002\u4f46\u662f\u4eff\u771f\u662f\u6ca1\u6709\u5916\u8bbe\u76f8\u8fde\u7684\uff0c\u56e0\u6b64\u63a5\u5165\u4eff\u771f\u9700\u8981\u901a\u8fc7 skip\u4fe1\u53f7 \u6765\u5ffd\u7565\u5bf9\u4e8e\u5916\u8bbe\u5730\u5740\u7684\u5199\u5165\uff0c\u52a9\u6559\u6240\u5199\u7684\u4eff\u771f\u9876\u5c42\u6587\u4ef6\u6b64\u65f6\u4f1a\u76f4\u63a5\u8f93\u51fa helloworld \u6765\u9a8c\u8bc1\u6b63\u786e\u6027\u3002","title":"lab1"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82/#_1","text":"","title":"\u6982\u8981"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82/#lab1-a","text":"\u4eff\u771f\uff1a make test-lab1a \u6587\u4ef6\uff1a lab1-test-a.* \u6307\u4ee4\uff1a addi xori ori andi lui jal beq ld sd","title":"lab1-a"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82/#lab1","text":"\u4eff\u771f\uff1a make test-lab1 \u6587\u4ef6\uff1a lab1-test.* \u6307\u4ee4\uff1a\u5728\u7b80\u5316\u7248\u57fa\u7840\u4e0a\u589e\u52a0 add sub and or xor auipc jalr","title":"lab1"},{"location":"lab1/%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82/#_2","text":"verilator\u4eff\u771f\u8f93\u51fa hit good trap \u5373\u7b97\u901a\u8fc7\uff0c\u540e\u7eed\u53ef\u4ee5\u4e0d\u7ba1 \u4e0a\u677f\u548cvivado\u4eff\u771f\u90fd\u4f1a\u8f93\u51fa hello world\uff0c\u6700\u540e\u5728\u8df3\u8f6c\u81ea\u5df1\u7684\u6307\u4ee4\u5904\u6b7b\u5faa\u73af \u6c47\u7f16\u4ee3\u7801 # \u540e\u7684\u6ce8\u91ca\u6709bug\uff0c\u7ed3\u679c\u4e0d\u4e00\u5b9a\u51c6\u786e\uff0c\u4ee5\u5b9e\u9645\u7684\u6307\u4ee4\u4e3a\u51c6 RISC-V\u67b6\u6784\u7684\u5185\u5b58\u5730\u5740\u57280x8000_0000\u4e4b\u4e0a(addr[31]=1)\uff1b\u5916\u8bbe\u5730\u5740\u57280x8000_0000\u4e4b\u4e0b(addr[31]=0)CPU\u8fd0\u884c\u7684\u7a0b\u5e8f\u6700\u540e\u4f1a\u8f93\u51fa hello world \u81f3\u4e32\u53e3\u5916\u8bbe\u7684\u5730\u5740\uff0c\u6240\u4ee5\u4e0a\u677f\u53ef\u4ee5\u770b\u5230\u4e32\u53e3\u6253\u5370\u51fa hello world\u3002\u4f46\u662f\u4eff\u771f\u662f\u6ca1\u6709\u5916\u8bbe\u76f8\u8fde\u7684\uff0c\u56e0\u6b64\u63a5\u5165\u4eff\u771f\u9700\u8981\u901a\u8fc7 skip\u4fe1\u53f7 \u6765\u5ffd\u7565\u5bf9\u4e8e\u5916\u8bbe\u5730\u5740\u7684\u5199\u5165\uff0c\u52a9\u6559\u6240\u5199\u7684\u4eff\u771f\u9876\u5c42\u6587\u4ef6\u6b64\u65f6\u4f1a\u76f4\u63a5\u8f93\u51fa helloworld \u6765\u9a8c\u8bc1\u6b63\u786e\u6027\u3002","title":"\u6ce8\u610f\u4e8b\u9879"},{"location":"lab2/lab2/","text":"\u5b9e\u9a8c\u4e8c \u603b\u7ebf\u5b9e\u9a8c \u00b6 \u9996\u5148\uff0c\u66f4\u65b0\u4ee3\u7801\u4ed3\u5e93\uff1a cd Arch-2022Spring # \u9996\u5148\uff0ccommit \u4e4b\u524d\u7684\u4ee3\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf commit\uff0c\u5c31\u8df3\u8fc7\u4e0b\u9762\u4e24\u884c git add . git commit -m \"lab1\" git remote -v # \u5982\u679c\u5730\u5740\u662fgit://github.com/FDUCSLG/Arch-2022Spring-FDU.git\uff0c\u5219\u6267\u884c\u8fd9\u4e00\u6b65\uff1a git remote set-url origin https://github.com/FDUCSLG/Arch-2022Spring-FDU.git # \u8fd9\u4e00\u6b65\u5982\u679c\u5361\u5f88\u4e45\uff0c\u5c31 Ctrl-C \u540e\u91cd\u8bd5 git fetch --all # \u6216\u8005\u4ec5\u62c9\u53d6master\u5206\u652f git fetch origin master git merge origin/master # Merge \u4e4b\u540e\u53ef\u4ee5\u9700\u8981\u5904\u7406 Merge Conflict\uff0c\u5728VS Code\u91cc\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5904\u7406 git submodule update 1 \u652f\u6301\u66f4\u591a\u7684\u6307\u4ee4 \u00b6 \u6dfb\u52a0\u4ee5\u4e0b\u6307\u4ee4\uff1a BNE BLT BGE BLTU BGEU SLTI SLTIU SLLI SRLI SRAI SLL SLT SLTU SRL SRA ADDIW SLLIW SRLIW SRAIW ADDW SUBW SLLW SRLW SRAW \u4e00\u4e9b tips\uff1a logic \u662f\u65e0\u7b26\u53f7\u7684\u3002 a < b \u662f\u5c06\u5b83\u4eec\u770b\u4f5c\u65e0\u7b26\u53f7\u6570\u6bd4\u8f83\uff0c $signed(a) < $signed(b) \u662f\u5c06\u5b83\u4eec\u770b\u4f5c\u6709\u7b26\u53f7\u6570\u6bd4\u8f83\u3002 \u903b\u8f91\u53f3\u79fb a >> b[5:0] \uff0c\u7b97\u672f\u53f3\u79fb $signed(a) >>> b[5:0] \u3002 2 \u652f\u6301\u63e1\u624b\u603b\u7ebf \u00b6 \u8be6\u89c1 \u603b\u7ebf\uff08\u4e0a\uff09 \u7684\u6587\u6863\u3002 3 \u652f\u6301\u5176\u4ed6\u7c92\u5ea6\u7684\u5185\u5b58\u8bfb\u5199 \u00b6 \u6dfb\u52a0\u4ee5\u4e0b\u6307\u4ee4\uff1a LB LH LW LBU LHU LWU SB SH SW DBus \u7684\u6570\u636e\u5bbd\u5ea6\u662f64bit\uff088Byte\uff09\u3002\u5982\u679c\u8981\u8fdb\u884cByte\u7ea7\u522b\u7684\u8bfb\u5199\uff0c\u6309\u4ee5\u4e0b\u89c4\u5219\uff1a 3.1 \u5b57\u8282\u8bfb \u00b6 dreq: valid = 1 addr = addr\uff0c\u5373\u65e0\u9700\u505a\u5bf9\u9f50\u5904\u7406 strobe = '0 msize: \u6839\u636e\u5b57\u8282\u6570\uff0c\u8bbe\u7f6e\u4e3a MSIZE1, MSIZE2, ... \u6216 MSIZE8 dresp: data = mem[addr[63:3]]\uff0c\u5373\u8fd4\u56de\u7684\u6570\u636e\u662f\u603b\u7ebf\u5bf9\u9f50\u7684\u3002 \u5199\u5165\u7684\u6570\u636e\u9700\u8981\u505a\u4e00\u5b9a\u7684\u5904\u7406\uff0c\u5c06\u8bfb\u53d6\u6307\u5b9a\u7684\u82e5\u5e72\u5b57\u8282\u7f6e\u4e8e\u4f4e\u4f4d\u3002\u6bd4\u5982\uff0c lbu r1, 0x13(r0) \uff0cdbus \u8fd4\u56de\u7684\u6570\u636e\u662f data = mem[0x10]\uff0c\u5199\u5165 r1 \u7684\u503c\u662f {56'b0, data[31:24]}\u3002 module readdata ( input u64 _rd , output u64 rd , input u3 addr , input msize_t msize , input u1 mem_unsigned ); u1 sign_bit ; always_comb begin rd = 'x ; sign_bit = 'x ; unique case ( msize ) MSIZE1: begin // LB, LBU unique case ( addr ) 3 'b000 : begin sign_bit = mem_unsigned ? 1 'b0 : _rd [ 7 ]; rd = {{ 56 { sign_bit }}, _rd [ 7 -: 8 ]}; end 3 'b001 : begin sign_bit = mem_unsigned ? 1 'b0 : _rd [ 15 ]; rd = {{ 56 { sign_bit }}, _rd [ 15 -: 8 ]}; end endcase // ... endcase end 3.2 \u5b57\u8282\u5199 \u00b6 dreq: valid = 1 addr = addr\uff0c\u5373\u65e0\u9700\u505a\u5bf9\u9f50\u5904\u7406 strobe: \u6839\u636e\u5730\u5740\u7684\u6700\u540e\u51e0\u4f4d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u9700\u8981\u5199\u54ea\u51e0\u4f4d\u3002 msize: \u6839\u636e\u5b57\u8282\u6570\uff0c\u8bbe\u7f6e\u4e3a MSIZE1, MSIZE2, ... \u6216 MSIZE8 data: \u6839\u636e\u5730\u5740\u7684\u6700\u540e\u51e0\u4f4d\uff0c\u8fdb\u884c\u79fb\u4f4d\u3002 \u5199\u5165\u7684\u6570\u636e\u548c strobe \u9700\u8981\u505a\u4e00\u5b9a\u7684\u5904\u7406\u3002\u6bd4\u5982\uff0c sb r1, 0x13(r0) \uff0cstrobe \u7f6e\u4e3a 8'b00001000 \uff0cdata \u7f6e\u4e3a {32'bx, r1[7:0], 24'bx} \u3002 module writedata import common ::* ; import decode_pkg ::* ; ( input u3 addr , input u64 _wd , input msize_t msize , output u64 wd , output strobe_t strobe ); always_comb begin strobe = '0 ; wd = '0 ; unique case ( msize ) MSIZE1: begin unique case ( addr ) 3 'b000 : begin wd [ 7 -: 8 ] = _wd [ 7 : 0 ]; strobe = 8'h01 ; end 3 'b001 : begin wd [ 15 -: 8 ] = _wd [ 7 : 0 ]; strobe = 8'h02 ; end endcase // ... endcase end 4 \u6d4b\u8bd5\u65b9\u6cd5 \u00b6 4.1 Verilator \u4eff\u771f \u00b6 \u68c0\u6d4b\u662f\u5426\u901a\u8fc7\uff1a\u4f7f\u7528 make test-lab2 DELAY=3 TEST=all \uff0c\u67e5\u770b\u662f\u5426\u6709 HIT GOOD TRAP \u3002 4.1.1 \u6d4b\u8bd5\u9879\u76ee \u00b6 \u8c03\u8bd5\u65f6\uff0c TEST \u53ef\u6539\u4e3a\u4ee5\u4e0b\u51e0\u9879\uff08\u5982 make test-lab2 DELAY=3 TEST=paint \uff09\uff1a test \u62e8\u7801\u5f00\u5173* \u9884\u671f\u6307\u4ee4\u6570 \u9884\u671f\u8f93\u51fa paint 001 ~4.4e6 \u8f93\u51faDone! Result:\uff0c\u540e\u9762\u7684\u5185\u5bb9\u662f\u4e00\u5f20\u56fe\u7247\u7684base64\u7f16\u7801\uff0c\u5e94\u8be5\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\uff08\u5305\u542b\u5f00\u5934\u7684data:\uff09\u590d\u5236\u5230\u6d4f\u89c8\u5668\u7684\u5730\u5740\u680f\u6253\u5f00\u3002\u5982\u679c\u4f60\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u76f4\u63a5\u6253\u5f00base64\u7f16\u7801\u7684\u56fe\u7247\uff0c\u8bf7\u5c1d\u8bd5\u5728\u767e\u5ea6\u4e0a\u627e\u4e00\u4e2abase64\u8f6c\u56fe\u7247\u7684\u5de5\u5177\uff0c\u5982 \u8fd9\u4e2a \u3002\u8f93\u51fa\u7684\u56fe\u7247\u5e94\u8be5\u662f\u4e00\u4e2a\u4f60\u5f88\u719f\u6089\u7684\u4e8b\u7269\uff0c\u5e76\u4e14\u6ca1\u6709\u660e\u663e\u7684\u53d8\u5f62\u548c\u566a\u70b9\u3002\u56fe\u7247\u7684\u5de6\u4e0a\u89d2\u6709\u4e00\u884c\u6570\u5b57\uff0c\u8868\u793acpu\u7ed8\u5236\u8fd9\u5f20\u56fe\u6240\u753b\u7684\u6beb\u79d2\u6570**\u3002 coremark 010 ~4.0e6 \u8f93\u51faFinised in xxxms.\u8868\u793acpu\u8fd0\u884ccoremark\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u65f6\u95f4\uff08Finised\u662f\u539f\u7a0b\u5e8f\u4e2d\u5c31\u6709\u7684typo\uff09\u3002\u5728\u7b54\u6848\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u4f1a\u8f93\u51faCoreMark Iterations/Sec\uff0c\u8868\u793acpu\u5728\u4e00\u79d2\u5185\u6267\u884ccoremark\u5faa\u73af\u7684\u6b21\u6570\uff0c\u5206\u6570\u8d8a\u9ad8\u8bf4\u660ecpu\u6027\u80fd\u8d8a\u597d\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700\u7684\u5206\u6570\u7ea6\u4e3a2e4 Iter/Sec***\u3002 dhrystone 011 ~4.8e6 \u8f93\u51faDhrystone PASS\uff08\u5982\u679c\u662fFAIL\uff0c\u90a3\u4e48\u8bf4\u660e\u7b54\u6848\u9519\u8bef\uff0c\u6240\u7ed9\u5f97\u5206\u6ca1\u6709\u610f\u4e49\uff09\uff0c\u5e76\u7ed9\u51facpu\u7684\u5f97\u5206\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700k\u7684\u5206\u6570\u7ea6\u4e3a1e5***\u3002 stream 100 ~8.5e6 \u8f93\u51fa\u5bf9cpu\u8bbf\u5b58\u901f\u5ea6\u7684\u6d4b\u8bd5\u7ed3\u679c\uff0c\u4e14\u540e\u9762\u5e94\u6709avg error less than 1.000000e-13 on all three arrays\uff08\u8868\u793a\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u672a\u51fa\u73b0\u9519\u8bef\uff09\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u6ca1\u6709\u5b98\u65b9\u7684\u53c2\u8003\u5206\u6570\uff0c\u6211\u4eec\u53ea\u63d0\u4f9bi7\u7684copy\u901f\u5ea6\u4f9b\u53c2\u8003\uff1aL1 cache ~ 500GB/s; L2&3 cache ~ 100GB/s; Memory ~ 25GB/s\u3002stream\u662f\u7ebf\u6027\u6267\u884c\u7684\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba4\u4e3acopy\u901f\u5ea6\u4e0eL1 cache\u63a5\u8fd1\u3002 conwaygame 101 ~9.9e6 \u8f93\u51fa\u5143\u80de\u81ea\u52a8\u673a\uff08conway\u751f\u547d\u6e38\u620f\uff09\u7684\u6f14\u5316\u7ed3\u679c\u3002\u6f14\u5316\u7ed3\u679c\u4e0e\u968f\u673a\u6570\u79cd\u5b50\u6709\u5173\uff0c\u6ca1\u6709\u6807\u51c6\u7b54\u6848\uff0c\u4f46\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5e94\u662f\u770b\u4e0a\u53bb\u6bd4\u8f83\u89c4\u5219\u7684\u56fe\u5f62\u3002 \uff08\u52a9\u6559\u53ef\u80fd\u4f1a\u6839\u636e\u968f\u673a\u6570\u79cd\u5b50\u590d\u6838\uff09 all 000 ~3.2e7 \u4f9d\u6b21\u6267\u884c\u4e0a\u9762\u4e94\u4e2a\u6d4b\u8bd5\u3002 *\uff1a\u7528\u4e8e\u5728\u4e0a\u677f\u65f6\u9009\u62e9\u8fd0\u884c\u7684\u6d4b\u8bd5\uff0c\u4ee5SW[2:0]\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5982100\u5c31\u662f\u5c06\u62e8\u7801\u5f00\u5173SW2\u6253\u5f00\uff08\u5411\u4e0a\u62e8\uff09\uff0cSW0\u548c1\u5173\u95ed\u3002\u9664012\u5916\u7684\u62e8\u7801\u5f00\u5173\u5747\u5e94\u5904\u4e8e\u5173\u95ed\u72b6\u6001\u3002 **\uff1a\u8868\u683c\u53ca\u6ce8\u91ca\u4e2d\u63d0\u53ca\u7684\u6240\u6709\u65f6\u95f4\u5747\u4ee5cpu\u65f6\u949f\u4e3a\u51c6\uff0c\u4eff\u771f\u65f6\u4f1a\u4e0e\u771f\u5b9e\u65f6\u95f4\u4e0d\u4e00\u81f4\u3002\u53d7\u4e32\u53e3\u7684\u8f93\u51fa\u901f\u7387\u8f83\u6162\u5f71\u54cd\uff0c\u4e0a\u677f\u65f6\u95f4\u591a\u4e8e\u4eff\u771f\u65f6\u95f4\u662f\u6b63\u5e38\u73b0\u8c61\u3002 ***\uff1ai7-7700\u7684\u65f6\u949f\u9891\u7387\u4e3a3.6GHz\uff0ci7-7700k\u7684\u65f6\u949f\u9891\u7387\u4e3a4.2GHz\uff0clab\u4e2d\u4f7f\u7528\u7684\u65f6\u949f\u9891\u7387\u4e3a20MHz\u3002\u53ef\u4ee5\u7528\u5206\u6570\u9664\u4ee5\u65f6\u949f\u9891\u7387\u6765\u8bc4\u4f30\u4ec5\u8003\u8651\u6d41\u6c34\u7ebf\u67b6\u6784\u65f6\u7684\u6027\u80fd\u5dee\u5f02\u3002 4.1.2 \u6ce2\u5f62\u56fe \u00b6 \u6dfb\u52a0\u6ce2\u5f62\u56fe\u7684\u53c2\u6570\u4f9d\u7136\u662f VOPT=\"--dump-wave\" \u3002\u4f46\u5468\u671f\u6570\u5f88\u591a\uff0c\u6ce2\u5f62\u56fe\u4f1a\u5f88\u5927\u3002\u4f60\u53ef\u4ee5\u5148\u8dd1\u4e00\u904d\u4e0d\u5e26\u6ce2\u5f62\u56fe\u7684\uff0c\u7136\u540e\u770b\u4e00\u4e0b\u5728\u54ea\u4e2a\u5468\u671f\u51fa\u9519\uff0c\u7136\u540e\u7528\u5f62\u5982 VOPT=\"--dump-wave -b <start> -e <end>\" \u7684\u53c2\u6570\u6765\u8dd1\u3002 \u4f8b\uff1a make test-lab2 DELAY=3 TEST=all VOPT=\"--dump-wave -b 1000 -e 2000 4.1.3 DELAY \u53c2\u6570 \u00b6 \u5ef6\u8fdf\u5468\u671f\u7684\u8303\u56f4\u662f [2, 1 + DELAY]\u3002\u5728\u4e0b\u4e2a\u5b9e\u9a8c\u91cc\uff0cDELAY \u5c06\u4e3a\u9ed8\u8ba4\u503c 31\u3002 4.2 Vivado \u4eff\u771f\u4e0e\u4e0a\u677f \u00b6 \u5728 Vivado \u4e2d\u6267\u884c vsrc/add_sources.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\u3002 \u5c06\u5b9e\u9a8c\u677f\u4e0a\u53f3\u4fa7\u56db\u4e2a\u5f00\u5173\u5f80\u4e0b\u62e8\uff0c\u8fde\u63a5\u4e32\u53e3\u8f6f\u4ef6\uff0c\u7136\u540e Program Device\u3002 \u5728 Vivado \u4e2d\u6267\u884c run simulation \u5373\u53ef\u5f00\u59cb\u4eff\u771f\u3002\u5728 vivado/src/with_delay/simtop.sv \u4e2d\u4fee\u6539 .sw(0) \uff0c\u53ef\u6267\u884c\u5355\u4e2a\u6d4b\u8bd5\u3002 5 \u4f5c\u4e1a\u63d0\u4ea4 \u00b6 DDL\uff1a 4\u670824\u65e523:59 \u63d0\u4ea4\u5185\u5bb9\uff1a\u4ee5\u5b66\u53f7\u547d\u540d\u7684 tar \u538b\u7f29\u5305\uff0c\u5982 18307130024.tar \uff0c\u5305\u62ec vsrc \u548c report.pdf \u3002 \u751f\u6210\u65b9\u6cd5\uff1a mkdir 18307130024 cp -r vsrc 18307130024 cp report.pdf 18307130024 tar cf 18307130024 .tar 18307130024 \u4f60\u9700\u8981\u901a\u8fc7 Verilator \u4eff\u771f\u548c Vivado \u4e0a\u677f\u3002 \u5b9e\u9a8c\u62a5\u544a\u9700\u8981\u5305\u62ec\uff1a \u4e3a\u4e86\u652f\u6301\u968f\u673a\u5ef6\u8fdf\uff0c\u6d41\u6c34\u7ebf\u7684\u6539\u52a8 \u6d4b\u8bd5\u901a\u8fc7\u7684\u622a\u56fe \u5b9e\u9a8c\u62a5\u544a\u91cc\u4e0d\u5e94\u6709\u5927\u6bb5\u4ee3\u7801\u7684\u590d\u5236\u3002 \u901a\u8fc7\u6d4b\u8bd5+\u5b9e\u9a8c\u62a5\u544a\u6709\u4e0a\u8ff0\u5185\u5bb9\uff0c\u672c\u6b21\u5b9e\u9a8c\u5c31\u53ef\u4ee5\u6ee1\u5206\u3002 \u5b9e\u9a8c\u62a5\u544a\u91cc\u53ef\u4ee5\u6709\uff1a \u5bf9\u672c\u95e8\u8bfe\u7a0b\u5b9e\u9a8c\uff08\u6587\u6863\u3001\u4ee3\u7801\u98ce\u683c\u3001\u89c6\u9891\u5f55\u5236\u7b49\uff09\u7684\u5efa\u8bae \u5bf9\u540e\u7eed\u5185\u5bb9\u7684\u671f\u5f85","title":"\u5b9e\u9a8c\u8981\u6c42"},{"location":"lab2/lab2/#_1","text":"\u9996\u5148\uff0c\u66f4\u65b0\u4ee3\u7801\u4ed3\u5e93\uff1a cd Arch-2022Spring # \u9996\u5148\uff0ccommit \u4e4b\u524d\u7684\u4ee3\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf commit\uff0c\u5c31\u8df3\u8fc7\u4e0b\u9762\u4e24\u884c git add . git commit -m \"lab1\" git remote -v # \u5982\u679c\u5730\u5740\u662fgit://github.com/FDUCSLG/Arch-2022Spring-FDU.git\uff0c\u5219\u6267\u884c\u8fd9\u4e00\u6b65\uff1a git remote set-url origin https://github.com/FDUCSLG/Arch-2022Spring-FDU.git # \u8fd9\u4e00\u6b65\u5982\u679c\u5361\u5f88\u4e45\uff0c\u5c31 Ctrl-C \u540e\u91cd\u8bd5 git fetch --all # \u6216\u8005\u4ec5\u62c9\u53d6master\u5206\u652f git fetch origin master git merge origin/master # Merge \u4e4b\u540e\u53ef\u4ee5\u9700\u8981\u5904\u7406 Merge Conflict\uff0c\u5728VS Code\u91cc\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5904\u7406 git submodule update","title":"\u5b9e\u9a8c\u4e8c \u603b\u7ebf\u5b9e\u9a8c"},{"location":"lab2/lab2/#1","text":"\u6dfb\u52a0\u4ee5\u4e0b\u6307\u4ee4\uff1a BNE BLT BGE BLTU BGEU SLTI SLTIU SLLI SRLI SRAI SLL SLT SLTU SRL SRA ADDIW SLLIW SRLIW SRAIW ADDW SUBW SLLW SRLW SRAW \u4e00\u4e9b tips\uff1a logic \u662f\u65e0\u7b26\u53f7\u7684\u3002 a < b \u662f\u5c06\u5b83\u4eec\u770b\u4f5c\u65e0\u7b26\u53f7\u6570\u6bd4\u8f83\uff0c $signed(a) < $signed(b) \u662f\u5c06\u5b83\u4eec\u770b\u4f5c\u6709\u7b26\u53f7\u6570\u6bd4\u8f83\u3002 \u903b\u8f91\u53f3\u79fb a >> b[5:0] \uff0c\u7b97\u672f\u53f3\u79fb $signed(a) >>> b[5:0] \u3002","title":"1 \u652f\u6301\u66f4\u591a\u7684\u6307\u4ee4"},{"location":"lab2/lab2/#2","text":"\u8be6\u89c1 \u603b\u7ebf\uff08\u4e0a\uff09 \u7684\u6587\u6863\u3002","title":"2 \u652f\u6301\u63e1\u624b\u603b\u7ebf"},{"location":"lab2/lab2/#3","text":"\u6dfb\u52a0\u4ee5\u4e0b\u6307\u4ee4\uff1a LB LH LW LBU LHU LWU SB SH SW DBus \u7684\u6570\u636e\u5bbd\u5ea6\u662f64bit\uff088Byte\uff09\u3002\u5982\u679c\u8981\u8fdb\u884cByte\u7ea7\u522b\u7684\u8bfb\u5199\uff0c\u6309\u4ee5\u4e0b\u89c4\u5219\uff1a","title":"3 \u652f\u6301\u5176\u4ed6\u7c92\u5ea6\u7684\u5185\u5b58\u8bfb\u5199"},{"location":"lab2/lab2/#31","text":"dreq: valid = 1 addr = addr\uff0c\u5373\u65e0\u9700\u505a\u5bf9\u9f50\u5904\u7406 strobe = '0 msize: \u6839\u636e\u5b57\u8282\u6570\uff0c\u8bbe\u7f6e\u4e3a MSIZE1, MSIZE2, ... \u6216 MSIZE8 dresp: data = mem[addr[63:3]]\uff0c\u5373\u8fd4\u56de\u7684\u6570\u636e\u662f\u603b\u7ebf\u5bf9\u9f50\u7684\u3002 \u5199\u5165\u7684\u6570\u636e\u9700\u8981\u505a\u4e00\u5b9a\u7684\u5904\u7406\uff0c\u5c06\u8bfb\u53d6\u6307\u5b9a\u7684\u82e5\u5e72\u5b57\u8282\u7f6e\u4e8e\u4f4e\u4f4d\u3002\u6bd4\u5982\uff0c lbu r1, 0x13(r0) \uff0cdbus \u8fd4\u56de\u7684\u6570\u636e\u662f data = mem[0x10]\uff0c\u5199\u5165 r1 \u7684\u503c\u662f {56'b0, data[31:24]}\u3002 module readdata ( input u64 _rd , output u64 rd , input u3 addr , input msize_t msize , input u1 mem_unsigned ); u1 sign_bit ; always_comb begin rd = 'x ; sign_bit = 'x ; unique case ( msize ) MSIZE1: begin // LB, LBU unique case ( addr ) 3 'b000 : begin sign_bit = mem_unsigned ? 1 'b0 : _rd [ 7 ]; rd = {{ 56 { sign_bit }}, _rd [ 7 -: 8 ]}; end 3 'b001 : begin sign_bit = mem_unsigned ? 1 'b0 : _rd [ 15 ]; rd = {{ 56 { sign_bit }}, _rd [ 15 -: 8 ]}; end endcase // ... endcase end","title":"3.1 \u5b57\u8282\u8bfb"},{"location":"lab2/lab2/#32","text":"dreq: valid = 1 addr = addr\uff0c\u5373\u65e0\u9700\u505a\u5bf9\u9f50\u5904\u7406 strobe: \u6839\u636e\u5730\u5740\u7684\u6700\u540e\u51e0\u4f4d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u9700\u8981\u5199\u54ea\u51e0\u4f4d\u3002 msize: \u6839\u636e\u5b57\u8282\u6570\uff0c\u8bbe\u7f6e\u4e3a MSIZE1, MSIZE2, ... \u6216 MSIZE8 data: \u6839\u636e\u5730\u5740\u7684\u6700\u540e\u51e0\u4f4d\uff0c\u8fdb\u884c\u79fb\u4f4d\u3002 \u5199\u5165\u7684\u6570\u636e\u548c strobe \u9700\u8981\u505a\u4e00\u5b9a\u7684\u5904\u7406\u3002\u6bd4\u5982\uff0c sb r1, 0x13(r0) \uff0cstrobe \u7f6e\u4e3a 8'b00001000 \uff0cdata \u7f6e\u4e3a {32'bx, r1[7:0], 24'bx} \u3002 module writedata import common ::* ; import decode_pkg ::* ; ( input u3 addr , input u64 _wd , input msize_t msize , output u64 wd , output strobe_t strobe ); always_comb begin strobe = '0 ; wd = '0 ; unique case ( msize ) MSIZE1: begin unique case ( addr ) 3 'b000 : begin wd [ 7 -: 8 ] = _wd [ 7 : 0 ]; strobe = 8'h01 ; end 3 'b001 : begin wd [ 15 -: 8 ] = _wd [ 7 : 0 ]; strobe = 8'h02 ; end endcase // ... endcase end","title":"3.2 \u5b57\u8282\u5199"},{"location":"lab2/lab2/#4","text":"","title":"4 \u6d4b\u8bd5\u65b9\u6cd5"},{"location":"lab2/lab2/#41-verilator","text":"\u68c0\u6d4b\u662f\u5426\u901a\u8fc7\uff1a\u4f7f\u7528 make test-lab2 DELAY=3 TEST=all \uff0c\u67e5\u770b\u662f\u5426\u6709 HIT GOOD TRAP \u3002","title":"4.1 Verilator \u4eff\u771f"},{"location":"lab2/lab2/#411","text":"\u8c03\u8bd5\u65f6\uff0c TEST \u53ef\u6539\u4e3a\u4ee5\u4e0b\u51e0\u9879\uff08\u5982 make test-lab2 DELAY=3 TEST=paint \uff09\uff1a test \u62e8\u7801\u5f00\u5173* \u9884\u671f\u6307\u4ee4\u6570 \u9884\u671f\u8f93\u51fa paint 001 ~4.4e6 \u8f93\u51faDone! Result:\uff0c\u540e\u9762\u7684\u5185\u5bb9\u662f\u4e00\u5f20\u56fe\u7247\u7684base64\u7f16\u7801\uff0c\u5e94\u8be5\u53ef\u4ee5\u76f4\u63a5\u5c06\u5176\uff08\u5305\u542b\u5f00\u5934\u7684data:\uff09\u590d\u5236\u5230\u6d4f\u89c8\u5668\u7684\u5730\u5740\u680f\u6253\u5f00\u3002\u5982\u679c\u4f60\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u76f4\u63a5\u6253\u5f00base64\u7f16\u7801\u7684\u56fe\u7247\uff0c\u8bf7\u5c1d\u8bd5\u5728\u767e\u5ea6\u4e0a\u627e\u4e00\u4e2abase64\u8f6c\u56fe\u7247\u7684\u5de5\u5177\uff0c\u5982 \u8fd9\u4e2a \u3002\u8f93\u51fa\u7684\u56fe\u7247\u5e94\u8be5\u662f\u4e00\u4e2a\u4f60\u5f88\u719f\u6089\u7684\u4e8b\u7269\uff0c\u5e76\u4e14\u6ca1\u6709\u660e\u663e\u7684\u53d8\u5f62\u548c\u566a\u70b9\u3002\u56fe\u7247\u7684\u5de6\u4e0a\u89d2\u6709\u4e00\u884c\u6570\u5b57\uff0c\u8868\u793acpu\u7ed8\u5236\u8fd9\u5f20\u56fe\u6240\u753b\u7684\u6beb\u79d2\u6570**\u3002 coremark 010 ~4.0e6 \u8f93\u51faFinised in xxxms.\u8868\u793acpu\u8fd0\u884ccoremark\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u65f6\u95f4\uff08Finised\u662f\u539f\u7a0b\u5e8f\u4e2d\u5c31\u6709\u7684typo\uff09\u3002\u5728\u7b54\u6848\u6b63\u786e\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd8\u4f1a\u8f93\u51faCoreMark Iterations/Sec\uff0c\u8868\u793acpu\u5728\u4e00\u79d2\u5185\u6267\u884ccoremark\u5faa\u73af\u7684\u6b21\u6570\uff0c\u5206\u6570\u8d8a\u9ad8\u8bf4\u660ecpu\u6027\u80fd\u8d8a\u597d\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700\u7684\u5206\u6570\u7ea6\u4e3a2e4 Iter/Sec***\u3002 dhrystone 011 ~4.8e6 \u8f93\u51faDhrystone PASS\uff08\u5982\u679c\u662fFAIL\uff0c\u90a3\u4e48\u8bf4\u660e\u7b54\u6848\u9519\u8bef\uff0c\u6240\u7ed9\u5f97\u5206\u6ca1\u6709\u610f\u4e49\uff09\uff0c\u5e76\u7ed9\u51facpu\u7684\u5f97\u5206\u3002\u4f5c\u4e3a\u5bf9\u6bd4\uff0ci7-7700k\u7684\u5206\u6570\u7ea6\u4e3a1e5***\u3002 stream 100 ~8.5e6 \u8f93\u51fa\u5bf9cpu\u8bbf\u5b58\u901f\u5ea6\u7684\u6d4b\u8bd5\u7ed3\u679c\uff0c\u4e14\u540e\u9762\u5e94\u6709avg error less than 1.000000e-13 on all three arrays\uff08\u8868\u793a\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u672a\u51fa\u73b0\u9519\u8bef\uff09\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u6ca1\u6709\u5b98\u65b9\u7684\u53c2\u8003\u5206\u6570\uff0c\u6211\u4eec\u53ea\u63d0\u4f9bi7\u7684copy\u901f\u5ea6\u4f9b\u53c2\u8003\uff1aL1 cache ~ 500GB/s; L2&3 cache ~ 100GB/s; Memory ~ 25GB/s\u3002stream\u662f\u7ebf\u6027\u6267\u884c\u7684\uff0c\u57fa\u672c\u4e0a\u53ef\u4ee5\u8ba4\u4e3acopy\u901f\u5ea6\u4e0eL1 cache\u63a5\u8fd1\u3002 conwaygame 101 ~9.9e6 \u8f93\u51fa\u5143\u80de\u81ea\u52a8\u673a\uff08conway\u751f\u547d\u6e38\u620f\uff09\u7684\u6f14\u5316\u7ed3\u679c\u3002\u6f14\u5316\u7ed3\u679c\u4e0e\u968f\u673a\u6570\u79cd\u5b50\u6709\u5173\uff0c\u6ca1\u6709\u6807\u51c6\u7b54\u6848\uff0c\u4f46\u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5e94\u662f\u770b\u4e0a\u53bb\u6bd4\u8f83\u89c4\u5219\u7684\u56fe\u5f62\u3002 \uff08\u52a9\u6559\u53ef\u80fd\u4f1a\u6839\u636e\u968f\u673a\u6570\u79cd\u5b50\u590d\u6838\uff09 all 000 ~3.2e7 \u4f9d\u6b21\u6267\u884c\u4e0a\u9762\u4e94\u4e2a\u6d4b\u8bd5\u3002 *\uff1a\u7528\u4e8e\u5728\u4e0a\u677f\u65f6\u9009\u62e9\u8fd0\u884c\u7684\u6d4b\u8bd5\uff0c\u4ee5SW[2:0]\u5f62\u5f0f\u7ed9\u51fa\uff0c\u5982100\u5c31\u662f\u5c06\u62e8\u7801\u5f00\u5173SW2\u6253\u5f00\uff08\u5411\u4e0a\u62e8\uff09\uff0cSW0\u548c1\u5173\u95ed\u3002\u9664012\u5916\u7684\u62e8\u7801\u5f00\u5173\u5747\u5e94\u5904\u4e8e\u5173\u95ed\u72b6\u6001\u3002 **\uff1a\u8868\u683c\u53ca\u6ce8\u91ca\u4e2d\u63d0\u53ca\u7684\u6240\u6709\u65f6\u95f4\u5747\u4ee5cpu\u65f6\u949f\u4e3a\u51c6\uff0c\u4eff\u771f\u65f6\u4f1a\u4e0e\u771f\u5b9e\u65f6\u95f4\u4e0d\u4e00\u81f4\u3002\u53d7\u4e32\u53e3\u7684\u8f93\u51fa\u901f\u7387\u8f83\u6162\u5f71\u54cd\uff0c\u4e0a\u677f\u65f6\u95f4\u591a\u4e8e\u4eff\u771f\u65f6\u95f4\u662f\u6b63\u5e38\u73b0\u8c61\u3002 ***\uff1ai7-7700\u7684\u65f6\u949f\u9891\u7387\u4e3a3.6GHz\uff0ci7-7700k\u7684\u65f6\u949f\u9891\u7387\u4e3a4.2GHz\uff0clab\u4e2d\u4f7f\u7528\u7684\u65f6\u949f\u9891\u7387\u4e3a20MHz\u3002\u53ef\u4ee5\u7528\u5206\u6570\u9664\u4ee5\u65f6\u949f\u9891\u7387\u6765\u8bc4\u4f30\u4ec5\u8003\u8651\u6d41\u6c34\u7ebf\u67b6\u6784\u65f6\u7684\u6027\u80fd\u5dee\u5f02\u3002","title":"4.1.1 \u6d4b\u8bd5\u9879\u76ee"},{"location":"lab2/lab2/#412","text":"\u6dfb\u52a0\u6ce2\u5f62\u56fe\u7684\u53c2\u6570\u4f9d\u7136\u662f VOPT=\"--dump-wave\" \u3002\u4f46\u5468\u671f\u6570\u5f88\u591a\uff0c\u6ce2\u5f62\u56fe\u4f1a\u5f88\u5927\u3002\u4f60\u53ef\u4ee5\u5148\u8dd1\u4e00\u904d\u4e0d\u5e26\u6ce2\u5f62\u56fe\u7684\uff0c\u7136\u540e\u770b\u4e00\u4e0b\u5728\u54ea\u4e2a\u5468\u671f\u51fa\u9519\uff0c\u7136\u540e\u7528\u5f62\u5982 VOPT=\"--dump-wave -b <start> -e <end>\" \u7684\u53c2\u6570\u6765\u8dd1\u3002 \u4f8b\uff1a make test-lab2 DELAY=3 TEST=all VOPT=\"--dump-wave -b 1000 -e 2000","title":"4.1.2 \u6ce2\u5f62\u56fe"},{"location":"lab2/lab2/#413-delay","text":"\u5ef6\u8fdf\u5468\u671f\u7684\u8303\u56f4\u662f [2, 1 + DELAY]\u3002\u5728\u4e0b\u4e2a\u5b9e\u9a8c\u91cc\uff0cDELAY \u5c06\u4e3a\u9ed8\u8ba4\u503c 31\u3002","title":"4.1.3 DELAY \u53c2\u6570"},{"location":"lab2/lab2/#42-vivado","text":"\u5728 Vivado \u4e2d\u6267\u884c vsrc/add_sources.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\u3002 \u5c06\u5b9e\u9a8c\u677f\u4e0a\u53f3\u4fa7\u56db\u4e2a\u5f00\u5173\u5f80\u4e0b\u62e8\uff0c\u8fde\u63a5\u4e32\u53e3\u8f6f\u4ef6\uff0c\u7136\u540e Program Device\u3002 \u5728 Vivado \u4e2d\u6267\u884c run simulation \u5373\u53ef\u5f00\u59cb\u4eff\u771f\u3002\u5728 vivado/src/with_delay/simtop.sv \u4e2d\u4fee\u6539 .sw(0) \uff0c\u53ef\u6267\u884c\u5355\u4e2a\u6d4b\u8bd5\u3002","title":"4.2 Vivado \u4eff\u771f\u4e0e\u4e0a\u677f"},{"location":"lab2/lab2/#5","text":"DDL\uff1a 4\u670824\u65e523:59 \u63d0\u4ea4\u5185\u5bb9\uff1a\u4ee5\u5b66\u53f7\u547d\u540d\u7684 tar \u538b\u7f29\u5305\uff0c\u5982 18307130024.tar \uff0c\u5305\u62ec vsrc \u548c report.pdf \u3002 \u751f\u6210\u65b9\u6cd5\uff1a mkdir 18307130024 cp -r vsrc 18307130024 cp report.pdf 18307130024 tar cf 18307130024 .tar 18307130024 \u4f60\u9700\u8981\u901a\u8fc7 Verilator \u4eff\u771f\u548c Vivado \u4e0a\u677f\u3002 \u5b9e\u9a8c\u62a5\u544a\u9700\u8981\u5305\u62ec\uff1a \u4e3a\u4e86\u652f\u6301\u968f\u673a\u5ef6\u8fdf\uff0c\u6d41\u6c34\u7ebf\u7684\u6539\u52a8 \u6d4b\u8bd5\u901a\u8fc7\u7684\u622a\u56fe \u5b9e\u9a8c\u62a5\u544a\u91cc\u4e0d\u5e94\u6709\u5927\u6bb5\u4ee3\u7801\u7684\u590d\u5236\u3002 \u901a\u8fc7\u6d4b\u8bd5+\u5b9e\u9a8c\u62a5\u544a\u6709\u4e0a\u8ff0\u5185\u5bb9\uff0c\u672c\u6b21\u5b9e\u9a8c\u5c31\u53ef\u4ee5\u6ee1\u5206\u3002 \u5b9e\u9a8c\u62a5\u544a\u91cc\u53ef\u4ee5\u6709\uff1a \u5bf9\u672c\u95e8\u8bfe\u7a0b\u5b9e\u9a8c\uff08\u6587\u6863\u3001\u4ee3\u7801\u98ce\u683c\u3001\u89c6\u9891\u5f55\u5236\u7b49\uff09\u7684\u5efa\u8bae \u5bf9\u540e\u7eed\u5185\u5bb9\u7684\u671f\u5f85","title":"5 \u4f5c\u4e1a\u63d0\u4ea4"},{"location":"lab2/%E6%80%BB%E7%BA%BF/","text":"\u603b\u7ebf\uff08\u4e0a\uff09 \u00b6 \u4e3a\u4e86\u9002\u914d\u5185\u5b58\u7684\u4e0d\u786e\u5b9a\u5ef6\u8fdf\uff0c\u9700\u8981\u5e26\u63e1\u624b\u4fe1\u53f7\u7684\u603b\u7ebf\u3002 \u8bbf\u5b58\u5ef6\u8fdf\uff1a\u53d1\u8d77\u8bbf\u5b58\u8bf7\u6c42\uff08\u5305\u62ec\u6307\u4ee4\u8bfb\u3001\u5185\u5b58\u8bfb\u5199\uff09\u540e\uff0c\u4e0d\u80fd\u5728\u540c\u4e00\u5468\u671f\u5f97\u5230\u7ed3\u679c\uff0c\u4e14\u4e0d\u77e5\u9053\u591a\u5c11\u4e2a\u5468\u671f\u540e\u80fd\u5f97\u5230\u7ed3\u679c\u3002 1 \u63e1\u624b\u603b\u7ebf \u00b6 \u56de\u987e IBus \u548c DBus \u7684\u4fe1\u53f7\uff1a typedef struct packed { logic valid ; // in request? addr_t addr ; // target address // ... } dbus_req_t ; typedef struct packed { logic addr_ok ; logic data_ok ; // is the field \"data\" valid? word_t data ; // the data read from cache } dbus_resp_t ; \u6211\u4eec\u5728 response \u91cc\u52a0\u4e86\u4e00\u4e2a data_ok \u4fe1\u53f7\u7528\u4e8e\u6807\u8bc6\u8bbf\u5b58\u64cd\u4f5c\u5728\u8fd9\u4e00\u65f6\u949f\u5468\u671f\u5b8c\u6210\u3002 \u8be5\u603b\u7ebf\u7684\u534f\u8bae\u5305\u62ec\uff1a req.valid \u4e3a0\u65f6\uff0c resp.data_ok \u4e3a\u4e0d\u5b9a\u503c\u3002 req.valid \u4e3a1\u671f\u95f4\uff0c\u4ee3\u8868\u4e00\u6b21\u8bbf\u5b58\u8bf7\u6c42\u3002\u5728\u6b64\u671f\u95f4\uff0c req.valid \u4e0e req.addr \u4e0d\u5141\u8bb8\u6539\u53d8\u3002 req.valid \u4e3a1\u65f6\uff0c\u68c0\u67e5 resp.data_ok \u3002\u5982\u679c\u4e3a1\uff0c\u5219\u4e0b\u4e2a\u65f6\u949f\u7684\u4e0a\u5347\u6cbf\u8868\u793a\u4e00\u6b21**\u63e1\u624b**\uff0c\u672c\u6b21\u8bbf\u5b58\u7ed3\u675f\u3002\u5982\u679c\u63e1\u624b\u540e req.valid \u4ecd\u4e3a1\uff0c\u5219\u89c6\u4e3a\u65b0\u7684\u4e00\u6b21\u8bf7\u6c42\u3002 \u8bbf\u5b58\u7684\u5ef6\u8fdf\uff0c\u8981\u6c42\u6d41\u6c34\u7ebf\u7684\u63a7\u5236\u4fe1\u53f7\u505a\u51fa\u4e00\u5b9a\u7684\u6539\u53d8\u3002\u7528 req.valid && ~resp.data_ok \u8868\u793a\u4e00\u6b21\u672a\u5b8c\u6210\u7684\u8bbf\u5b58\u8bf7\u6c42\uff0c\u6d41\u6c34\u7ebf\u9700\u8981\u963b\u585e\u3002 assign stallM = dreq . valid && ~ dresp . data_ok ; assign flushW = dreq . valid && ~ dresp . data_ok ; // in memory stage assign dataM . mem_rdata = dresp . data ; 2 \u4ef2\u88c1 \u00b6 \u65b0\u589e\u9650\u5236\uff1aCPU \u4e0e\u5185\u5b58\u4e4b\u95f4\u53ea\u6709\u4e00\u4e2a\u8bbf\u5b58\u7aef\u53e3\u3002\u5f53 ireq \u4e0e dreq \u540c\u65f6\u6709\u6548\u65f6\uff0c\u4ef2\u88c1\u5668\u9700\u8981\u5c4f\u853d\u4e00\u4e2a req\u3002 vsrc/util/CBusArbiter.sv \u91cc\u5df2\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4ef2\u88c1\u5668\u3002","title":"\u603b\u7ebf(\u4e0a)"},{"location":"lab2/%E6%80%BB%E7%BA%BF/#_1","text":"\u4e3a\u4e86\u9002\u914d\u5185\u5b58\u7684\u4e0d\u786e\u5b9a\u5ef6\u8fdf\uff0c\u9700\u8981\u5e26\u63e1\u624b\u4fe1\u53f7\u7684\u603b\u7ebf\u3002 \u8bbf\u5b58\u5ef6\u8fdf\uff1a\u53d1\u8d77\u8bbf\u5b58\u8bf7\u6c42\uff08\u5305\u62ec\u6307\u4ee4\u8bfb\u3001\u5185\u5b58\u8bfb\u5199\uff09\u540e\uff0c\u4e0d\u80fd\u5728\u540c\u4e00\u5468\u671f\u5f97\u5230\u7ed3\u679c\uff0c\u4e14\u4e0d\u77e5\u9053\u591a\u5c11\u4e2a\u5468\u671f\u540e\u80fd\u5f97\u5230\u7ed3\u679c\u3002","title":"\u603b\u7ebf\uff08\u4e0a\uff09"},{"location":"lab2/%E6%80%BB%E7%BA%BF/#1","text":"\u56de\u987e IBus \u548c DBus \u7684\u4fe1\u53f7\uff1a typedef struct packed { logic valid ; // in request? addr_t addr ; // target address // ... } dbus_req_t ; typedef struct packed { logic addr_ok ; logic data_ok ; // is the field \"data\" valid? word_t data ; // the data read from cache } dbus_resp_t ; \u6211\u4eec\u5728 response \u91cc\u52a0\u4e86\u4e00\u4e2a data_ok \u4fe1\u53f7\u7528\u4e8e\u6807\u8bc6\u8bbf\u5b58\u64cd\u4f5c\u5728\u8fd9\u4e00\u65f6\u949f\u5468\u671f\u5b8c\u6210\u3002 \u8be5\u603b\u7ebf\u7684\u534f\u8bae\u5305\u62ec\uff1a req.valid \u4e3a0\u65f6\uff0c resp.data_ok \u4e3a\u4e0d\u5b9a\u503c\u3002 req.valid \u4e3a1\u671f\u95f4\uff0c\u4ee3\u8868\u4e00\u6b21\u8bbf\u5b58\u8bf7\u6c42\u3002\u5728\u6b64\u671f\u95f4\uff0c req.valid \u4e0e req.addr \u4e0d\u5141\u8bb8\u6539\u53d8\u3002 req.valid \u4e3a1\u65f6\uff0c\u68c0\u67e5 resp.data_ok \u3002\u5982\u679c\u4e3a1\uff0c\u5219\u4e0b\u4e2a\u65f6\u949f\u7684\u4e0a\u5347\u6cbf\u8868\u793a\u4e00\u6b21**\u63e1\u624b**\uff0c\u672c\u6b21\u8bbf\u5b58\u7ed3\u675f\u3002\u5982\u679c\u63e1\u624b\u540e req.valid \u4ecd\u4e3a1\uff0c\u5219\u89c6\u4e3a\u65b0\u7684\u4e00\u6b21\u8bf7\u6c42\u3002 \u8bbf\u5b58\u7684\u5ef6\u8fdf\uff0c\u8981\u6c42\u6d41\u6c34\u7ebf\u7684\u63a7\u5236\u4fe1\u53f7\u505a\u51fa\u4e00\u5b9a\u7684\u6539\u53d8\u3002\u7528 req.valid && ~resp.data_ok \u8868\u793a\u4e00\u6b21\u672a\u5b8c\u6210\u7684\u8bbf\u5b58\u8bf7\u6c42\uff0c\u6d41\u6c34\u7ebf\u9700\u8981\u963b\u585e\u3002 assign stallM = dreq . valid && ~ dresp . data_ok ; assign flushW = dreq . valid && ~ dresp . data_ok ; // in memory stage assign dataM . mem_rdata = dresp . data ;","title":"1 \u63e1\u624b\u603b\u7ebf"},{"location":"lab2/%E6%80%BB%E7%BA%BF/#2","text":"\u65b0\u589e\u9650\u5236\uff1aCPU \u4e0e\u5185\u5b58\u4e4b\u95f4\u53ea\u6709\u4e00\u4e2a\u8bbf\u5b58\u7aef\u53e3\u3002\u5f53 ireq \u4e0e dreq \u540c\u65f6\u6709\u6548\u65f6\uff0c\u4ef2\u88c1\u5668\u9700\u8981\u5c4f\u853d\u4e00\u4e2a req\u3002 vsrc/util/CBusArbiter.sv \u91cc\u5df2\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u4ef2\u88c1\u5668\u3002","title":"2 \u4ef2\u88c1"},{"location":"lab3/cache/","text":"\u7f13\u5b58 \u00b6 \u672c\u6587\u6863\u4ee5 DCache \u4e3a\u4f8b\uff0c\u8bb2\u89e3\u5982\u4f55\u5b9e\u73b0 Cache\u3002 0 \u524d\u7f6e\u77e5\u8bc6 \u00b6 \u7f13\u5b58\u7684\u67b6\u6784\uff1a\u76f4\u63a5\u6620\u5c04\u3001\u5168\u76f8\u8054\u3001\u7ec4\u76f8\u8054 \u7f13\u5b58\u5f62\u5f0f\uff1a\u5199\u56de\u3001\u76f4\u5199\u7b49 \u7f13\u5b58\u8fd0\u4f5c\u6d41\u7a0b\uff1a\u547d\u4e2d\u65f6\u505a\u4ec0\u4e48\uff0cmiss \u65f6\u505a\u4ec0\u4e48 1 \u5b9e\u73b0\u601d\u8def \u00b6 \u6211\u4eec\u5c06\u5728 vsrc/cache/DCache.sv \u4e2d\u5b9e\u73b0 DCache\u3002\u4ee5\u4e0b\u4ee3\u7801\u5747\u4f4d\u4e8e DCache \u5185\u90e8\u3002 \u7aef\u53e3\uff1aCache \u4e0e Memory \u4e4b\u95f4\u91c7\u7528 CBus\uff0cCache \u4e0e Pipeline(Core) \u4e4b\u95f4\u91c7\u7528 DBus\u3002 \u53c2\u6570\uff1a 8 Byte Word\uff0c\u652f\u6301 Byte \u5199 1 Cache Line = 16 Words = 128 Bytes\uff0c\u6bcf\u6b21 CBus Transaction \u4f20\u8f93\u4e00\u4e2a Cache Line 2/4 Cache Ways 8/4 Cache Sets Total 2KB 1.1 \u753b\u7535\u8def\u56fe \u00b6 \u7406\u6e05\u7f13\u5b58\u884c\u4e3a\u4e0e\u67b6\u6784 1.2 \u51c6\u5907\u5de5\u4f5c \u00b6 \u53c2\u6570\u5316\u3001\u5199\u53d6\u4f4d\u51fd\u6570\u3002 localparam WORDS_PER_LINE = 16 ; localparam ASSOCIATIVITY = 2 ; localparam SET_NUM = 8 ; localparam OFFSET_BITS = $clog2 ( WORDS_PER_LINE ); localparam INDEX_BITS = $clog2 ( SET_NUM ); localparam TAG_BITS = 64 - SET_BITS - OFFSET_BITS - 3 ; /* Maybe 32, or smaller */ localparam type offset_t = logic [ OFFSET_BITS - 1 : 0 ]; localparam type index_t = logic [ INDEX_BITS - 1 : 0 ]; localparam type tag_t = logic [ TAG_BITS - 1 : 0 ]; function offset_t get_offset ( addr_t addr ) return addr [ 3 + OFFSET_BITS - 1 : 3 ]; endfunction function index_t get_index ( addr_t addr ) return addr [ 3 + INDEX_BITS + OFFSET_BITS - 1 : OFFSET_BITS + 3 ]; endfunction function tag_t get_tag ( addr_t addr ) return addr [ 3 + INDEX_BITS + OFFSET_BITS + TAG_BITS - 1 : 3 + INDEX_BITS + OFFSET_BITS ]; endfunction localparam type state_t = enum logic [ 2 : 0 ] { INIT , FETCH , WRITEBACK }; 1.3 \u72b6\u6001\u673a \u00b6 \u72b6\u6001\u673a\u91c7\u7528 always_comb + unique_case \u7684\u5f62\u5f0f\u5b9e\u73b0\u3002 always_comb \u8f93\u5165 hit\u3001dirty\u3001\u603b\u7ebf\u63a7\u5236\u4fe1\u53f7\uff0c\u4ec5\u9a71\u52a8 state \uff0c\u5176\u4ed6\u4fe1\u53f7\u57fa\u672c\u4e0a\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u7528 assign \u9a71\u52a8\u3002 1.4 Cache Set \u00b6 \u6bcf\u4e2a Cache Set \u5305\u542b ASSOCIATIVITY \u4e2a Cache Line\uff0c\u5305\u62ec\uff1a Data Meta Tag Valid Dirty typedef struct packed { u1 valid ; u1 dirty ; tag_t tag ; } meta_t ; \u66ff\u6362\u7b56\u7565\uff1a\u82e5\u5e72\u4e2a\u8ba1\u6570\u5668\uff0c\u6bcf\u6b21\u8bbf\u5b58\u9009\u62e9\u5bf9\u5e94\u7684\u52a01\uff08\u5efa\u8bae\u5728 INIT \u72b6\u6001\u4e0b\u52a0\u4e00\uff09 \u4f8b\u5316\u591a\u4e2a Cache Set\uff1a for ( genvar i = 0 ; i < SET_NUM ; i ++ ) begin : cache_sets // ... end : cache_sets \u5728\u4e0d\u540c\u72b6\u6001\u4e0b\uff0ccreq\uff0cdresp\uff0cset \u5185\u90e8\u4fe1\u53f7\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684\u503c\u3002 1.5 \u5b58\u50a8\u7ed3\u6784 \u00b6 \u5728 Cache \u91cc\uff0c\u5982\u679c\u5b58\u50a8\u7ed3\u6784\u4e0e\u903b\u8f91\u7ed3\u6784\u4e00\u81f4\uff0c\u4f1a\u5bfc\u81f4\u8d44\u6e90\u6d6a\u8d39\u3002 for ( genvar i = 0 ; i < SET_NUM ; i ++ ) begin : cache_sets u64 data_array [ WORDS_PER_LINE - 1 : 0 ]; assign data_from_sets [ i ] = data_array [ get_offset ( addr )]; end : cache_sets assign data = data_from_sets [ get_index ( addr )]; data_array \u662f\u5b58\u50a8\u5143\u4ef6\uff0c data_from_sets \u662f wire \uff0c\u540e\u8005\u7684\u9009\u62e9\u7535\u8def\uff0864bits\uff09\u4f1a\u6d88\u8017\u5927\u91cf\u7535\u8def\u8d44\u6e90\u3002 Cache \u5185\u4e3b\u8981\u7684\u5b58\u50a8\u5143\u4ef6\uff1a Data Meta Age State, Counter \u540e\u4e24\u9879\u51e0\u4e4e\u4e0d\u5360\u7a7a\u95f4\uff0c\u4e3b\u8981\u8003\u8651\u524d\u4e24\u9879\u3002 1.5.1 Meta \u00b6 \u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6211\u4eec\u9700\u8981\u8bfb\u53d6\u4e00\u4e2a Set \u91cc\u7684\u6240\u6709 Meta\uff0c\u6700\u591a\u5199\u5165\u4e00\u4e2a Set \u91cc\u7684\u4e00\u4e2a Meta\u3002 \u6240\u4ee5\uff0c\u4ece\u5168\u5c40\u6765\u770b\uff0c\u53ea\u9700\u8981\u8bfb\u4e00\u4e2a Set \u7684 Meta\uff0c\u628a\u8fd9\u4e2a Meta \u4ea4\u7ed9\u6240\u6709 Set\u3002 1.5.2 Data \u00b6 \u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6211\u4eec\u9700\u8981\u8bfb\u53d6\u4e00\u4e2a Word\uff0c\u6700\u591a\u5199\u5165\u4e00\u4e2a Word\u3002 \u6240\u4ee5\uff0c\u4ece\u5168\u5c40\u6765\u770b\uff0c\u53ea\u9700\u8981\u8bfb\u4e00\u4e2a Word \u7684 Data\uff0c\u628a\u8fd9\u4e2a Data \u4ea4\u7ed9\u6240\u6709 Set\uff08Set \u5185\u90e8\u4f3c\u4e4e\u4e0d\u7528\u83b7\u53d6 Data \u4e86\uff09\u3002 1.5.3 RAM \u6a21\u578b \u00b6 ram/template.sv \u63d0\u4f9b\u4e86\u82e5\u5e72 RAM \u4ee5\u4e0b\u51e0\u79cd RAM \u6a21\u578b\uff1a \u5355\u7aef\u53e3 RAM_SinglePort \u4e00\u8bfb\u4e00\u5199 RAM_SimpleDualPort \u53cc\u7aef\u53e3 RAM_TrueDualPort \u4e00\u8bfb\uff0c\u4e00\u8bfb/\u5199 LUTRAM_DualPort \u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a ADDR_WIDTH \uff1a\u5730\u5740\u4f4d\u6570\u3002\u8fd9\u91cc\u7684\u5730\u5740\u5bf9\u5e94\u4e8e\u6570\u7ec4\u4e0b\u6807\uff0c\u548c\u5185\u5b58\u5730\u5740\u4e0d\u540c\u3002 DATA_WIDTH \uff1a\u4e00\u4e2a\u5b57\u7684\u4f4d\u6570\uff0c\u662f\u8bfb\u53d6\u6700\u5c0f\u5355\u4f4d\u4e0e\u5199\u5165\u6700\u5c0f\u5355\u4f4d\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002 BYTE_WIDTH \uff1a\u4e00\u4e2a\u5b57\u8282\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u7684\u5b57\u8282\u8868\u793a\u5199\u5165\u7684\u6700\u5c0f\u5355\u4f4d\u3002\u5728 Meta \u91cc\uff0c\u53ef\u4ee5\u8fd9\u4e48\u8bbe\u7f6e\uff1a .DATA_WIDTH($bits(meta_t) * ASSOCIATIVITY), .BYTE_WIDTH($bits(meta_t)) MEM_TYPE \uff1a\u5728\u57fa\u7840\u90e8\u5206\uff0c\u8bbe\u7f6e\u4e3a0\u3002 READ_LATENCY \uff1a\u8bfb\u5ef6\u8fdf\uff0c\u5728\u57fa\u7840\u90e8\u5206\uff0c\u8bbe\u7f6e\u4e3a0\u3002 \u5982\u679c DATA_WIDTH != BYTE_WIDTH \uff0c\u5219\u5199\u5165\u9700\u8981\u5199\u4f7f\u80fd\uff0c wdata \u7684\u8bbe\u7f6e\u89c4\u5219\u4e0e memory \u4e2d\u7684\u4e00\u81f4\u3002 \u7528\u8fd9\u79cd\u5b58\u50a8\u7ed3\u6784\uff0c\u53ea\u9700\u5bf9 RAM \u7684\u5730\u5740\u505a\u9009\u62e9\uff08\u5730\u5740\u4f4d\u6570 log2(CACHE_SIZE/DATA_WIDTH) \uff0c\u672c\u4f8b\u4e2d\u4e3a16\uff0c\u8fdc\u5c0f\u4e8e\u6570\u636e\u768464\uff09\u3002 1.6 \u652f\u6301 Uncached Request \u00b6 dreq.addr[31] == 0 \u7684\u8bf7\u6c42\u4e0d\u7ecf\u8fc7 Cache\uff0c\u4e0d\u5e94\u5c06\u72b6\u6001\u5207\u6362\u81f3 FETCH \u6216 Writeback \uff0c\u4e0d\u5e94\u5bf9 Meta\u3001Data\u3001Age \u8fdb\u884c\u4fee\u6539\u3002 \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u72b6\u6001\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u8bf7\u6c42\u53d1\u7ed9 creq\u3002burst \u8bbe\u7f6e\u4e3a FIXED \uff0clen \u8bbe\u7f6e\u4e3a MLEN1 \uff0csize \u8bbe\u7f6e\u4e3a dreq.size \u3002 1.7 \u652f\u6301 Reset \u00b6 \u6bcf\u4e2a\u6d4b\u8bd5\u5f00\u59cb\u65f6\u4f1a\u6709 10k \u4e2a reset \u65f6\u949f\u5468\u671f\u3002\u4f60\u9700\u8981\u904d\u5386\u6240\u6709 Cache set\uff0c\u5c06\u6240\u6709 Valid \u4f4d\u7f6e 0\u3002\u8fd9\u53ea\u9700\u8981\u4e00\u4e2a\u4e0d\u505c\u9012\u589e\u7684\u8ba1\u6570\u5668\u5373\u53ef\u5b9e\u73b0\u3002 2 \u8fdb\u9636 \u00b6 \u6d41\u6c34\u7ebf Cache \u975e\u963b\u585e Cache \uff08burst = wrap\uff09 \u652f\u6301 Read_Latency > 0 \u7684 RAM\uff08\u4e24\u7ea7 Memory \u6d41\u6c34\u6bb5\uff09 3 \u6d4b\u8bd5 \u00b6 \u6267\u884c make test-cache \u3002 \u57fa\u7840\u6d4b\u8bd5\u5728 verilate/vsrc/VCacheTop/tests.inl \u91cc\uff0c\u4f60\u53ef\u4ee5\u5728 verilate/vsrc/VCacheTop/tests.cpp \u5185\u6dfb\u52a0\u66f4\u591a\u6d4b\u8bd5\u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7684\u7ed3\u6784\u4e3a\uff1a WITH [SKIP] [DEBUG] [TRACE] [CMP_TO(ref)]{ [test code] } AS(\"name\"); SKIP \u8868\u793a\u5141\u8bb8\u5931\u8d25\uff0c DEBUG \u8868\u793a\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff0c TRACE \u8868\u793a\u8f93\u51fa\u6ce2\u5f62\u56fe\uff0c CMP_TO(ref) \u8868\u793a\u8fdb\u884c\u5bf9\u7167\u3002 \u5bf9\u7167\u6a21\u578b\u5728 verilate/vsrc/VCacheTop/cache_ref.cpp \u5185\u91cc\u5b9e\u73b0\uff0c\u53ef\u4ee5\u5728\u6bcf\u4e00\u6b21\u8bfb\u5199\u64cd\u4f5c\u91cc\u68c0\u67e5 Cache \u5185\u90e8\u4fe1\u53f7\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 \u83b7\u53d6\u5185\u90e8\u4fe1\u53f7\u7684\u65b9\u5f0f\uff1a \u5728 vsrc/VCacheTop.sv \u91cc\u58f0\u660e\u4fe1\u53f7\uff0c\u7528 top.xxx.yyy \u6765 assign \u8fc7\u53bb\u3002 for ( genvar i = 0 ; i < SET_NUM ; i ++ ) begin : cache_sets u64 data_array [ WORDS_PER_LINE - 1 : 0 ]; assign data_from_sets [ i ] = data_array [ get_offset ( addr )]; end : cache_sets // cache_sets[i].data_array[1] \u5728 verilate/vsrc/VCacheTop/cache_ref.cpp \u91cc\u4f7f\u7528 scope->signal_name \u6765\u83b7\u53d6\u4fe1\u53f7\u5185\u5bb9\u3002 \u53c2\u8003\u6a21\u578b\u5982\u9700\u5bf9\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ef\u4f7f\u7528 mem.load(addr) \u6216 mem.store(addr, data, mask) \uff0c\u8be6\u7ec6\u7528\u6cd5\u53ef\u53c2\u8003 REFERENCE_CACHE \uff0c\u5bf9\u5e94\u6267\u884c make test-refcache \u3002 \u53ef\u5728 verilate/vsrc/VCacheTop/cache_ref.h \u91cc\u6dfb\u52a0\u6210\u5458\u51fd\u6570\u6216\u6210\u5458\u53d8\u91cf\u3002 \u6267\u884c make test-cache-gdb \u7528 gdb \u8c03\u8bd5\u4eff\u771f\u7a0b\u5e8f\uff08\u63a8\u8350 pwndbg \uff09\u3002 4 \u8981\u6c42 \u00b6 \u5b9e\u73b0\u7ec4\u76f8\u8054\uff0c\u66ff\u6362\u7b56\u7565\u4efb\u610f Read_Latency \u4e3a 0 \u7684 RAM\uff0c\u603b\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e 5KB\uff08\u2264 2KB I + \u2264 2KB D + \u2264 1 KB Meta\uff09 Read_Latency \u5927\u4e8e 0 \u7684 RAM\uff0c\u603b\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e 32KB \u6267\u884c make test-cache \u901a\u8fc7","title":"\u7f13\u5b58"},{"location":"lab3/cache/#_1","text":"\u672c\u6587\u6863\u4ee5 DCache \u4e3a\u4f8b\uff0c\u8bb2\u89e3\u5982\u4f55\u5b9e\u73b0 Cache\u3002","title":"\u7f13\u5b58"},{"location":"lab3/cache/#0","text":"\u7f13\u5b58\u7684\u67b6\u6784\uff1a\u76f4\u63a5\u6620\u5c04\u3001\u5168\u76f8\u8054\u3001\u7ec4\u76f8\u8054 \u7f13\u5b58\u5f62\u5f0f\uff1a\u5199\u56de\u3001\u76f4\u5199\u7b49 \u7f13\u5b58\u8fd0\u4f5c\u6d41\u7a0b\uff1a\u547d\u4e2d\u65f6\u505a\u4ec0\u4e48\uff0cmiss \u65f6\u505a\u4ec0\u4e48","title":"0 \u524d\u7f6e\u77e5\u8bc6"},{"location":"lab3/cache/#1","text":"\u6211\u4eec\u5c06\u5728 vsrc/cache/DCache.sv \u4e2d\u5b9e\u73b0 DCache\u3002\u4ee5\u4e0b\u4ee3\u7801\u5747\u4f4d\u4e8e DCache \u5185\u90e8\u3002 \u7aef\u53e3\uff1aCache \u4e0e Memory \u4e4b\u95f4\u91c7\u7528 CBus\uff0cCache \u4e0e Pipeline(Core) \u4e4b\u95f4\u91c7\u7528 DBus\u3002 \u53c2\u6570\uff1a 8 Byte Word\uff0c\u652f\u6301 Byte \u5199 1 Cache Line = 16 Words = 128 Bytes\uff0c\u6bcf\u6b21 CBus Transaction \u4f20\u8f93\u4e00\u4e2a Cache Line 2/4 Cache Ways 8/4 Cache Sets Total 2KB","title":"1 \u5b9e\u73b0\u601d\u8def"},{"location":"lab3/cache/#11","text":"\u7406\u6e05\u7f13\u5b58\u884c\u4e3a\u4e0e\u67b6\u6784","title":"1.1 \u753b\u7535\u8def\u56fe"},{"location":"lab3/cache/#12","text":"\u53c2\u6570\u5316\u3001\u5199\u53d6\u4f4d\u51fd\u6570\u3002 localparam WORDS_PER_LINE = 16 ; localparam ASSOCIATIVITY = 2 ; localparam SET_NUM = 8 ; localparam OFFSET_BITS = $clog2 ( WORDS_PER_LINE ); localparam INDEX_BITS = $clog2 ( SET_NUM ); localparam TAG_BITS = 64 - SET_BITS - OFFSET_BITS - 3 ; /* Maybe 32, or smaller */ localparam type offset_t = logic [ OFFSET_BITS - 1 : 0 ]; localparam type index_t = logic [ INDEX_BITS - 1 : 0 ]; localparam type tag_t = logic [ TAG_BITS - 1 : 0 ]; function offset_t get_offset ( addr_t addr ) return addr [ 3 + OFFSET_BITS - 1 : 3 ]; endfunction function index_t get_index ( addr_t addr ) return addr [ 3 + INDEX_BITS + OFFSET_BITS - 1 : OFFSET_BITS + 3 ]; endfunction function tag_t get_tag ( addr_t addr ) return addr [ 3 + INDEX_BITS + OFFSET_BITS + TAG_BITS - 1 : 3 + INDEX_BITS + OFFSET_BITS ]; endfunction localparam type state_t = enum logic [ 2 : 0 ] { INIT , FETCH , WRITEBACK };","title":"1.2 \u51c6\u5907\u5de5\u4f5c"},{"location":"lab3/cache/#13","text":"\u72b6\u6001\u673a\u91c7\u7528 always_comb + unique_case \u7684\u5f62\u5f0f\u5b9e\u73b0\u3002 always_comb \u8f93\u5165 hit\u3001dirty\u3001\u603b\u7ebf\u63a7\u5236\u4fe1\u53f7\uff0c\u4ec5\u9a71\u52a8 state \uff0c\u5176\u4ed6\u4fe1\u53f7\u57fa\u672c\u4e0a\u90fd\u53ef\u4ee5\u72ec\u7acb\u5730\u7528 assign \u9a71\u52a8\u3002","title":"1.3 \u72b6\u6001\u673a"},{"location":"lab3/cache/#14-cache-set","text":"\u6bcf\u4e2a Cache Set \u5305\u542b ASSOCIATIVITY \u4e2a Cache Line\uff0c\u5305\u62ec\uff1a Data Meta Tag Valid Dirty typedef struct packed { u1 valid ; u1 dirty ; tag_t tag ; } meta_t ; \u66ff\u6362\u7b56\u7565\uff1a\u82e5\u5e72\u4e2a\u8ba1\u6570\u5668\uff0c\u6bcf\u6b21\u8bbf\u5b58\u9009\u62e9\u5bf9\u5e94\u7684\u52a01\uff08\u5efa\u8bae\u5728 INIT \u72b6\u6001\u4e0b\u52a0\u4e00\uff09 \u4f8b\u5316\u591a\u4e2a Cache Set\uff1a for ( genvar i = 0 ; i < SET_NUM ; i ++ ) begin : cache_sets // ... end : cache_sets \u5728\u4e0d\u540c\u72b6\u6001\u4e0b\uff0ccreq\uff0cdresp\uff0cset \u5185\u90e8\u4fe1\u53f7\u90fd\u4f1a\u6709\u5bf9\u5e94\u7684\u503c\u3002","title":"1.4 Cache Set"},{"location":"lab3/cache/#15","text":"\u5728 Cache \u91cc\uff0c\u5982\u679c\u5b58\u50a8\u7ed3\u6784\u4e0e\u903b\u8f91\u7ed3\u6784\u4e00\u81f4\uff0c\u4f1a\u5bfc\u81f4\u8d44\u6e90\u6d6a\u8d39\u3002 for ( genvar i = 0 ; i < SET_NUM ; i ++ ) begin : cache_sets u64 data_array [ WORDS_PER_LINE - 1 : 0 ]; assign data_from_sets [ i ] = data_array [ get_offset ( addr )]; end : cache_sets assign data = data_from_sets [ get_index ( addr )]; data_array \u662f\u5b58\u50a8\u5143\u4ef6\uff0c data_from_sets \u662f wire \uff0c\u540e\u8005\u7684\u9009\u62e9\u7535\u8def\uff0864bits\uff09\u4f1a\u6d88\u8017\u5927\u91cf\u7535\u8def\u8d44\u6e90\u3002 Cache \u5185\u4e3b\u8981\u7684\u5b58\u50a8\u5143\u4ef6\uff1a Data Meta Age State, Counter \u540e\u4e24\u9879\u51e0\u4e4e\u4e0d\u5360\u7a7a\u95f4\uff0c\u4e3b\u8981\u8003\u8651\u524d\u4e24\u9879\u3002","title":"1.5 \u5b58\u50a8\u7ed3\u6784"},{"location":"lab3/cache/#151-meta","text":"\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6211\u4eec\u9700\u8981\u8bfb\u53d6\u4e00\u4e2a Set \u91cc\u7684\u6240\u6709 Meta\uff0c\u6700\u591a\u5199\u5165\u4e00\u4e2a Set \u91cc\u7684\u4e00\u4e2a Meta\u3002 \u6240\u4ee5\uff0c\u4ece\u5168\u5c40\u6765\u770b\uff0c\u53ea\u9700\u8981\u8bfb\u4e00\u4e2a Set \u7684 Meta\uff0c\u628a\u8fd9\u4e2a Meta \u4ea4\u7ed9\u6240\u6709 Set\u3002","title":"1.5.1 Meta"},{"location":"lab3/cache/#152-data","text":"\u4e00\u4e2a\u5468\u671f\u5185\uff0c\u6211\u4eec\u9700\u8981\u8bfb\u53d6\u4e00\u4e2a Word\uff0c\u6700\u591a\u5199\u5165\u4e00\u4e2a Word\u3002 \u6240\u4ee5\uff0c\u4ece\u5168\u5c40\u6765\u770b\uff0c\u53ea\u9700\u8981\u8bfb\u4e00\u4e2a Word \u7684 Data\uff0c\u628a\u8fd9\u4e2a Data \u4ea4\u7ed9\u6240\u6709 Set\uff08Set \u5185\u90e8\u4f3c\u4e4e\u4e0d\u7528\u83b7\u53d6 Data \u4e86\uff09\u3002","title":"1.5.2 Data"},{"location":"lab3/cache/#153-ram","text":"ram/template.sv \u63d0\u4f9b\u4e86\u82e5\u5e72 RAM \u4ee5\u4e0b\u51e0\u79cd RAM \u6a21\u578b\uff1a \u5355\u7aef\u53e3 RAM_SinglePort \u4e00\u8bfb\u4e00\u5199 RAM_SimpleDualPort \u53cc\u7aef\u53e3 RAM_TrueDualPort \u4e00\u8bfb\uff0c\u4e00\u8bfb/\u5199 LUTRAM_DualPort \u6709\u4ee5\u4e0b\u51e0\u4e2a\u53c2\u6570\uff1a ADDR_WIDTH \uff1a\u5730\u5740\u4f4d\u6570\u3002\u8fd9\u91cc\u7684\u5730\u5740\u5bf9\u5e94\u4e8e\u6570\u7ec4\u4e0b\u6807\uff0c\u548c\u5185\u5b58\u5730\u5740\u4e0d\u540c\u3002 DATA_WIDTH \uff1a\u4e00\u4e2a\u5b57\u7684\u4f4d\u6570\uff0c\u662f\u8bfb\u53d6\u6700\u5c0f\u5355\u4f4d\u4e0e\u5199\u5165\u6700\u5c0f\u5355\u4f4d\u7684\u6700\u5c0f\u516c\u500d\u6570\u3002 BYTE_WIDTH \uff1a\u4e00\u4e2a\u5b57\u8282\u7684\u4f4d\u6570\u3002\u8fd9\u91cc\u7684\u5b57\u8282\u8868\u793a\u5199\u5165\u7684\u6700\u5c0f\u5355\u4f4d\u3002\u5728 Meta \u91cc\uff0c\u53ef\u4ee5\u8fd9\u4e48\u8bbe\u7f6e\uff1a .DATA_WIDTH($bits(meta_t) * ASSOCIATIVITY), .BYTE_WIDTH($bits(meta_t)) MEM_TYPE \uff1a\u5728\u57fa\u7840\u90e8\u5206\uff0c\u8bbe\u7f6e\u4e3a0\u3002 READ_LATENCY \uff1a\u8bfb\u5ef6\u8fdf\uff0c\u5728\u57fa\u7840\u90e8\u5206\uff0c\u8bbe\u7f6e\u4e3a0\u3002 \u5982\u679c DATA_WIDTH != BYTE_WIDTH \uff0c\u5219\u5199\u5165\u9700\u8981\u5199\u4f7f\u80fd\uff0c wdata \u7684\u8bbe\u7f6e\u89c4\u5219\u4e0e memory \u4e2d\u7684\u4e00\u81f4\u3002 \u7528\u8fd9\u79cd\u5b58\u50a8\u7ed3\u6784\uff0c\u53ea\u9700\u5bf9 RAM \u7684\u5730\u5740\u505a\u9009\u62e9\uff08\u5730\u5740\u4f4d\u6570 log2(CACHE_SIZE/DATA_WIDTH) \uff0c\u672c\u4f8b\u4e2d\u4e3a16\uff0c\u8fdc\u5c0f\u4e8e\u6570\u636e\u768464\uff09\u3002","title":"1.5.3 RAM \u6a21\u578b"},{"location":"lab3/cache/#16-uncached-request","text":"dreq.addr[31] == 0 \u7684\u8bf7\u6c42\u4e0d\u7ecf\u8fc7 Cache\uff0c\u4e0d\u5e94\u5c06\u72b6\u6001\u5207\u6362\u81f3 FETCH \u6216 Writeback \uff0c\u4e0d\u5e94\u5bf9 Meta\u3001Data\u3001Age \u8fdb\u884c\u4fee\u6539\u3002 \u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u72b6\u6001\uff0c\u76f4\u63a5\u628a\u8fd9\u4e2a\u8bf7\u6c42\u53d1\u7ed9 creq\u3002burst \u8bbe\u7f6e\u4e3a FIXED \uff0clen \u8bbe\u7f6e\u4e3a MLEN1 \uff0csize \u8bbe\u7f6e\u4e3a dreq.size \u3002","title":"1.6 \u652f\u6301 Uncached Request"},{"location":"lab3/cache/#17-reset","text":"\u6bcf\u4e2a\u6d4b\u8bd5\u5f00\u59cb\u65f6\u4f1a\u6709 10k \u4e2a reset \u65f6\u949f\u5468\u671f\u3002\u4f60\u9700\u8981\u904d\u5386\u6240\u6709 Cache set\uff0c\u5c06\u6240\u6709 Valid \u4f4d\u7f6e 0\u3002\u8fd9\u53ea\u9700\u8981\u4e00\u4e2a\u4e0d\u505c\u9012\u589e\u7684\u8ba1\u6570\u5668\u5373\u53ef\u5b9e\u73b0\u3002","title":"1.7 \u652f\u6301 Reset"},{"location":"lab3/cache/#2","text":"\u6d41\u6c34\u7ebf Cache \u975e\u963b\u585e Cache \uff08burst = wrap\uff09 \u652f\u6301 Read_Latency > 0 \u7684 RAM\uff08\u4e24\u7ea7 Memory \u6d41\u6c34\u6bb5\uff09","title":"2 \u8fdb\u9636"},{"location":"lab3/cache/#3","text":"\u6267\u884c make test-cache \u3002 \u57fa\u7840\u6d4b\u8bd5\u5728 verilate/vsrc/VCacheTop/tests.inl \u91cc\uff0c\u4f60\u53ef\u4ee5\u5728 verilate/vsrc/VCacheTop/tests.cpp \u5185\u6dfb\u52a0\u66f4\u591a\u6d4b\u8bd5\u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u7684\u7ed3\u6784\u4e3a\uff1a WITH [SKIP] [DEBUG] [TRACE] [CMP_TO(ref)]{ [test code] } AS(\"name\"); SKIP \u8868\u793a\u5141\u8bb8\u5931\u8d25\uff0c DEBUG \u8868\u793a\u6253\u5370\u8c03\u8bd5\u4fe1\u606f\uff0c TRACE \u8868\u793a\u8f93\u51fa\u6ce2\u5f62\u56fe\uff0c CMP_TO(ref) \u8868\u793a\u8fdb\u884c\u5bf9\u7167\u3002 \u5bf9\u7167\u6a21\u578b\u5728 verilate/vsrc/VCacheTop/cache_ref.cpp \u5185\u91cc\u5b9e\u73b0\uff0c\u53ef\u4ee5\u5728\u6bcf\u4e00\u6b21\u8bfb\u5199\u64cd\u4f5c\u91cc\u68c0\u67e5 Cache \u5185\u90e8\u4fe1\u53f7\u662f\u5426\u7b26\u5408\u9884\u671f\u3002 \u83b7\u53d6\u5185\u90e8\u4fe1\u53f7\u7684\u65b9\u5f0f\uff1a \u5728 vsrc/VCacheTop.sv \u91cc\u58f0\u660e\u4fe1\u53f7\uff0c\u7528 top.xxx.yyy \u6765 assign \u8fc7\u53bb\u3002 for ( genvar i = 0 ; i < SET_NUM ; i ++ ) begin : cache_sets u64 data_array [ WORDS_PER_LINE - 1 : 0 ]; assign data_from_sets [ i ] = data_array [ get_offset ( addr )]; end : cache_sets // cache_sets[i].data_array[1] \u5728 verilate/vsrc/VCacheTop/cache_ref.cpp \u91cc\u4f7f\u7528 scope->signal_name \u6765\u83b7\u53d6\u4fe1\u53f7\u5185\u5bb9\u3002 \u53c2\u8003\u6a21\u578b\u5982\u9700\u5bf9\u5185\u5b58\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ef\u4f7f\u7528 mem.load(addr) \u6216 mem.store(addr, data, mask) \uff0c\u8be6\u7ec6\u7528\u6cd5\u53ef\u53c2\u8003 REFERENCE_CACHE \uff0c\u5bf9\u5e94\u6267\u884c make test-refcache \u3002 \u53ef\u5728 verilate/vsrc/VCacheTop/cache_ref.h \u91cc\u6dfb\u52a0\u6210\u5458\u51fd\u6570\u6216\u6210\u5458\u53d8\u91cf\u3002 \u6267\u884c make test-cache-gdb \u7528 gdb \u8c03\u8bd5\u4eff\u771f\u7a0b\u5e8f\uff08\u63a8\u8350 pwndbg \uff09\u3002","title":"3 \u6d4b\u8bd5"},{"location":"lab3/cache/#4","text":"\u5b9e\u73b0\u7ec4\u76f8\u8054\uff0c\u66ff\u6362\u7b56\u7565\u4efb\u610f Read_Latency \u4e3a 0 \u7684 RAM\uff0c\u603b\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e 5KB\uff08\u2264 2KB I + \u2264 2KB D + \u2264 1 KB Meta\uff09 Read_Latency \u5927\u4e8e 0 \u7684 RAM\uff0c\u603b\u5927\u5c0f\u5c0f\u4e8e\u7b49\u4e8e 32KB \u6267\u884c make test-cache \u901a\u8fc7","title":"4 \u8981\u6c42"},{"location":"lab3/lab3/","text":"\u5b9e\u9a8c\u4e09 \u7f13\u5b58 \u00b6 \u9996\u5148\uff0c\u66f4\u65b0\u4ee3\u7801\u4ed3\u5e93\uff1a cd Arch-2022Spring # \u9996\u5148\uff0ccommit \u4e4b\u524d\u7684\u4ee3\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf commit\uff0c\u5c31\u8df3\u8fc7\u4e0b\u9762\u4e24\u884c git add . git commit -m \"lab2\" git remote -v # \u5982\u679c\u5730\u5740\u662fgit://github.com/FDUCSLG/Arch-2022Spring-FDU.git\uff0c\u5219\u6267\u884c\u8fd9\u4e00\u6b65\uff1a git remote set-url origin https://github.com/FDUCSLG/Arch-2022Spring-FDU.git # \u53eafecth master\u5206\u679d\u5c31\u53ef\u4ee5 git fetch origin master git merge origin/master # Merge \u4e4b\u540e\u53ef\u4ee5\u9700\u8981\u5904\u7406 Merge Conflict\uff0c\u5728VS Code\u91cc\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5904\u7406 git submodule update \u66f4\u65b0\u5b8c\u6210\u540e\uff0c\u8fd0\u884c make test-refcache \uff0c\u5982\u679c\u62a5\u9519 verilated.h \u4e4b\u7c7b\u7684\u5934\u6587\u4ef6 not found \uff0c\u8bf7\u628a verilator \u7684\u76ee\u5f55\u8f6f\u94fe\u63a5\u5230 /usr/share/verilator/ \uff0c\u6bd4\u5982\uff1a ls /usr/local/share/verilator # if exists sudo ln -s /usr/local/share/verilator /usr/share/verilator \u518d\u8fd0\u884c make test-refcache \u3002 1 \u652f\u6301\u66f4\u591a\u7684\u6307\u4ee4 \u00b6 \u6dfb\u52a0\u4ee5\u4e0b\u6307\u4ee4\uff1a MUL DIV DIVU REM REMU MULW DIVW DIVUW REMW REMUW \u8981\u6c42\u5b9e\u73b0\u591a\u5468\u671f\u4e58\u9664\u6cd5\u5668\u3002\u4e0d\u5141\u8bb8\u4f7f\u7528 / \u4e0e % \u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u4f7f\u7528 * \u8fd0\u7b97\u7b26\u3002\u53ef\u53c2\u8003 \u591a\u5468\u671f\u4e58\u9664\u6cd5\u5668 \uff0c\u6709\u7ad6\u5f0f\u4e58\u9664\u6cd5\u7684\u5b9e\u73b0\u601d\u8def\u3002 \u9700\u8981\u5224\u65ad\u9664\u4ee5\u96f6\u7684\u60c5\u51b5\uff0c\u8bbe\u7f6e\u4f59\u6570\u4e3a\u88ab\u9664\u6570\uff0c\u5546\u4e3a '1 \u3002 \u9ad8\u9636\u5185\u5bb9\uff1a \u9664\u6cd5\u5668 shift over zero, high radix \uff08\u89c1\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784-\u91cf\u5316\u5206\u6790\u65b9\u6cd5\u300b\uff09 Tree-based \u4e58\u6cd5\u5668 \uff08\u89c1\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784-\u91cf\u5316\u5206\u6790\u65b9\u6cd5\u300b\uff09 DSP-based \u4e58\u6cd5\u5668\uff08\u5728\u8bc4\u8bba\u533a/slack\u7fa4\u91cc\u4e00\u8d77\u8ba8\u8bba\uff09 2 \u5b9e\u73b0\u7f13\u5b58 \u00b6 \u8be6\u89c1\u7f13\u5b58\u7684\u6587\u6863\u3002 3 \u6d4b\u8bd5\u65b9\u6cd5 \u00b6 3.1 Verilator \u4eff\u771f \u00b6 \u68c0\u6d4b\u662f\u5426\u901a\u8fc7\uff1a \u4f7f\u7528 make test-lab3 TEST=all \uff0c\u67e5\u770b\u662f\u5426\u6709 HIT GOOD TRAP \u3002 \u4f7f\u7528 make test-cache \u3002 3.2 Vivado \u4eff\u771f\u4e0e\u4e0a\u677f \u00b6 \u5728 Vivado \u4e2d\u6267\u884c vsrc/add_sources.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\u3002 \u5c06\u5b9e\u9a8c\u677f\u4e0a\u53f3\u4fa7\u56db\u4e2a\u5f00\u5173\u5f80\u4e0b\u62e8\uff0c\u8fde\u63a5\u4e32\u53e3\u8f6f\u4ef6\uff0c\u7136\u540e Program Device\u3002 \u5728 Vivado \u4e2d\u6267\u884c run simulation \u5373\u53ef\u5f00\u59cb\u4eff\u771f\u3002\u5728 vivado/src/with_delay/simtop.sv \u4e2d\u4fee\u6539 .sw(0) \uff0c\u53ef\u6267\u884c\u5355\u4e2a\u6d4b\u8bd5\u3002 4 \u4f5c\u4e1a\u63d0\u4ea4 \u00b6 DDL\uff1a 5\u670815\u65e523:59 \u63d0\u4ea4\u5185\u5bb9\uff1a\u4ee5\u5b66\u53f7\u547d\u540d\u7684 tar \u538b\u7f29\u5305\uff0c\u5982 18307130024.tar \uff0c\u5305\u62ec vsrc verilate \u548c report.pdf \u3002 \u751f\u6210\u65b9\u6cd5\uff1a mkdir 18307130024 cp -r vsrc verilate 18307130024 cp report.pdf 18307130024 tar cf 18307130024 .tar 18307130024 \u4f60\u9700\u8981\u901a\u8fc7 Verilator \u4eff\u771f\u548c Vivado \u4e0a\u677f\u3002 \u5b9e\u9a8c\u62a5\u544a\u9700\u8981\u5305\u62ec\uff1a \u4e3a\u4e86\u652f\u6301\u968f\u673a\u5ef6\u8fdf\uff0c\u6d41\u6c34\u7ebf\u7684\u6539\u52a8 \u6d4b\u8bd5\u901a\u8fc7\u7684\u622a\u56fe \u5b9e\u9a8c\u62a5\u544a\u91cc\u4e0d\u5e94\u6709\u5927\u6bb5\u4ee3\u7801\u7684\u590d\u5236\u3002 \u901a\u8fc7\u6d4b\u8bd5+\u5b9e\u9a8c\u62a5\u544a\u6709\u4e0a\u8ff0\u5185\u5bb9\uff0c\u672c\u6b21\u5b9e\u9a8c\u5c31\u53ef\u4ee5\u6ee1\u5206\u3002 \u5b9e\u9a8c\u62a5\u544a\u91cc\u53ef\u4ee5\u6709\uff1a \u5bf9\u672c\u95e8\u8bfe\u7a0b\u5b9e\u9a8c\uff08\u6587\u6863\u3001\u4ee3\u7801\u98ce\u683c\u3001\u89c6\u9891\u5f55\u5236\u7b49\uff09\u7684\u5efa\u8bae \u5bf9\u540e\u7eed\u5185\u5bb9\u7684\u671f\u5f85","title":"\u5b9e\u9a8c\u8981\u6c42"},{"location":"lab3/lab3/#_1","text":"\u9996\u5148\uff0c\u66f4\u65b0\u4ee3\u7801\u4ed3\u5e93\uff1a cd Arch-2022Spring # \u9996\u5148\uff0ccommit \u4e4b\u524d\u7684\u4ee3\u7801\u3002\u5982\u679c\u4f60\u5df2\u7ecf commit\uff0c\u5c31\u8df3\u8fc7\u4e0b\u9762\u4e24\u884c git add . git commit -m \"lab2\" git remote -v # \u5982\u679c\u5730\u5740\u662fgit://github.com/FDUCSLG/Arch-2022Spring-FDU.git\uff0c\u5219\u6267\u884c\u8fd9\u4e00\u6b65\uff1a git remote set-url origin https://github.com/FDUCSLG/Arch-2022Spring-FDU.git # \u53eafecth master\u5206\u679d\u5c31\u53ef\u4ee5 git fetch origin master git merge origin/master # Merge \u4e4b\u540e\u53ef\u4ee5\u9700\u8981\u5904\u7406 Merge Conflict\uff0c\u5728VS Code\u91cc\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5904\u7406 git submodule update \u66f4\u65b0\u5b8c\u6210\u540e\uff0c\u8fd0\u884c make test-refcache \uff0c\u5982\u679c\u62a5\u9519 verilated.h \u4e4b\u7c7b\u7684\u5934\u6587\u4ef6 not found \uff0c\u8bf7\u628a verilator \u7684\u76ee\u5f55\u8f6f\u94fe\u63a5\u5230 /usr/share/verilator/ \uff0c\u6bd4\u5982\uff1a ls /usr/local/share/verilator # if exists sudo ln -s /usr/local/share/verilator /usr/share/verilator \u518d\u8fd0\u884c make test-refcache \u3002","title":"\u5b9e\u9a8c\u4e09 \u7f13\u5b58"},{"location":"lab3/lab3/#1","text":"\u6dfb\u52a0\u4ee5\u4e0b\u6307\u4ee4\uff1a MUL DIV DIVU REM REMU MULW DIVW DIVUW REMW REMUW \u8981\u6c42\u5b9e\u73b0\u591a\u5468\u671f\u4e58\u9664\u6cd5\u5668\u3002\u4e0d\u5141\u8bb8\u4f7f\u7528 / \u4e0e % \u8fd0\u7b97\u7b26\uff0c\u5141\u8bb8\u4f7f\u7528 * \u8fd0\u7b97\u7b26\u3002\u53ef\u53c2\u8003 \u591a\u5468\u671f\u4e58\u9664\u6cd5\u5668 \uff0c\u6709\u7ad6\u5f0f\u4e58\u9664\u6cd5\u7684\u5b9e\u73b0\u601d\u8def\u3002 \u9700\u8981\u5224\u65ad\u9664\u4ee5\u96f6\u7684\u60c5\u51b5\uff0c\u8bbe\u7f6e\u4f59\u6570\u4e3a\u88ab\u9664\u6570\uff0c\u5546\u4e3a '1 \u3002 \u9ad8\u9636\u5185\u5bb9\uff1a \u9664\u6cd5\u5668 shift over zero, high radix \uff08\u89c1\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784-\u91cf\u5316\u5206\u6790\u65b9\u6cd5\u300b\uff09 Tree-based \u4e58\u6cd5\u5668 \uff08\u89c1\u300a\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784-\u91cf\u5316\u5206\u6790\u65b9\u6cd5\u300b\uff09 DSP-based \u4e58\u6cd5\u5668\uff08\u5728\u8bc4\u8bba\u533a/slack\u7fa4\u91cc\u4e00\u8d77\u8ba8\u8bba\uff09","title":"1 \u652f\u6301\u66f4\u591a\u7684\u6307\u4ee4"},{"location":"lab3/lab3/#2","text":"\u8be6\u89c1\u7f13\u5b58\u7684\u6587\u6863\u3002","title":"2 \u5b9e\u73b0\u7f13\u5b58"},{"location":"lab3/lab3/#3","text":"","title":"3 \u6d4b\u8bd5\u65b9\u6cd5"},{"location":"lab3/lab3/#31-verilator","text":"\u68c0\u6d4b\u662f\u5426\u901a\u8fc7\uff1a \u4f7f\u7528 make test-lab3 TEST=all \uff0c\u67e5\u770b\u662f\u5426\u6709 HIT GOOD TRAP \u3002 \u4f7f\u7528 make test-cache \u3002","title":"3.1 Verilator \u4eff\u771f"},{"location":"lab3/lab3/#32-vivado","text":"\u5728 Vivado \u4e2d\u6267\u884c vsrc/add_sources.tcl \u6dfb\u52a0\u6e90\u6587\u4ef6\u3002 \u5c06\u5b9e\u9a8c\u677f\u4e0a\u53f3\u4fa7\u56db\u4e2a\u5f00\u5173\u5f80\u4e0b\u62e8\uff0c\u8fde\u63a5\u4e32\u53e3\u8f6f\u4ef6\uff0c\u7136\u540e Program Device\u3002 \u5728 Vivado \u4e2d\u6267\u884c run simulation \u5373\u53ef\u5f00\u59cb\u4eff\u771f\u3002\u5728 vivado/src/with_delay/simtop.sv \u4e2d\u4fee\u6539 .sw(0) \uff0c\u53ef\u6267\u884c\u5355\u4e2a\u6d4b\u8bd5\u3002","title":"3.2 Vivado \u4eff\u771f\u4e0e\u4e0a\u677f"},{"location":"lab3/lab3/#4","text":"DDL\uff1a 5\u670815\u65e523:59 \u63d0\u4ea4\u5185\u5bb9\uff1a\u4ee5\u5b66\u53f7\u547d\u540d\u7684 tar \u538b\u7f29\u5305\uff0c\u5982 18307130024.tar \uff0c\u5305\u62ec vsrc verilate \u548c report.pdf \u3002 \u751f\u6210\u65b9\u6cd5\uff1a mkdir 18307130024 cp -r vsrc verilate 18307130024 cp report.pdf 18307130024 tar cf 18307130024 .tar 18307130024 \u4f60\u9700\u8981\u901a\u8fc7 Verilator \u4eff\u771f\u548c Vivado \u4e0a\u677f\u3002 \u5b9e\u9a8c\u62a5\u544a\u9700\u8981\u5305\u62ec\uff1a \u4e3a\u4e86\u652f\u6301\u968f\u673a\u5ef6\u8fdf\uff0c\u6d41\u6c34\u7ebf\u7684\u6539\u52a8 \u6d4b\u8bd5\u901a\u8fc7\u7684\u622a\u56fe \u5b9e\u9a8c\u62a5\u544a\u91cc\u4e0d\u5e94\u6709\u5927\u6bb5\u4ee3\u7801\u7684\u590d\u5236\u3002 \u901a\u8fc7\u6d4b\u8bd5+\u5b9e\u9a8c\u62a5\u544a\u6709\u4e0a\u8ff0\u5185\u5bb9\uff0c\u672c\u6b21\u5b9e\u9a8c\u5c31\u53ef\u4ee5\u6ee1\u5206\u3002 \u5b9e\u9a8c\u62a5\u544a\u91cc\u53ef\u4ee5\u6709\uff1a \u5bf9\u672c\u95e8\u8bfe\u7a0b\u5b9e\u9a8c\uff08\u6587\u6863\u3001\u4ee3\u7801\u98ce\u683c\u3001\u89c6\u9891\u5f55\u5236\u7b49\uff09\u7684\u5efa\u8bae \u5bf9\u540e\u7eed\u5185\u5bb9\u7684\u671f\u5f85","title":"4 \u4f5c\u4e1a\u63d0\u4ea4"},{"location":"lab3/%E6%80%BB%E7%BA%BF/","text":"\u603b\u7ebf\uff08\u4e0b\uff09 \u00b6 \u5185\u5b58\u6bcf\u6b21\u5bfb\u5740\u7684\u5ef6\u8fdf\u5f88\u5927\uff0c\u4f46\u4e00\u6b21\u5bfb\u5740\u5f97\u5230\u7684\u6570\u636e\u5757\u901a\u5e38\u8fdc\u5927\u4e8e\u603b\u7ebf\u5bbd\u5ea6\u3002 \u5f15\u5165\u7a81\u53d1\u4f20\u8f93\u7684\u673a\u5236\uff0c\u5728\u4e00\u6b21\u8bbf\u5b58\u4e8b\u52a1\u4e2d\u4f20\u8f93\u8fde\u7eed\u7684\u591a\u4e2a\u5b57\u3002 \u7f13\u5b58\u603b\u7ebf\uff08Cache Bus, CBus\uff09\u501f\u9274\u4e86 AXI4 \uff0c\u7528\u4e8e\u652f\u6301\u7a81\u53d1\u4f20\u8f93\u3002 typedef struct packed { logic valid ; // in request? logic is_write ; // is it a write transaction? msize_t size ; // number of bytes in one burst addr_t addr ; // start address strobe_t strobe ; // which bytes are enabled? word_t data ; // the data to write mlen_t len ; // number of bursts axi_burst_type_t burst ; } cbus_req_t ; typedef struct packed { logic ready ; // is data arrived in this cycle? logic last ; // is it the last word? word_t data ; // the data from AXI bus } cbus_resp_t ; CBus \u6709\u4e09\u4e2a\u7528\u4e8e\u7a81\u53d1\u4f20\u8f93\u7684\u8bf7\u6c42\u4fe1\u53f7\uff1a size \u8868\u793a\u4e00\u4e2a\u5b57\u7684\u5927\u5c0f\uff0c\u9700\u8981\u5c0f\u4e8e\u7b49\u4e8e\u603b\u7ebf\u5bbd\u5ea6 len \u8868\u793a\u8fd9\u6b21\u7a81\u53d1\u4f20\u8f93\u4e2d\u5b57\u7684\u6570\u91cf burst \u8868\u793a\u7a81\u53d1\u4f20\u8f93\u7684\u6a21\u5f0f\uff0c\u6bd4\u5982 AXI_BURST_FIXED \uff0c AXI_BURST_INCR AXI_BURST_FIXED \u8868\u793a\u4e0d\u4f7f\u7528\u7a81\u53d1\u4f20\u8f93\uff0clen \u4e5f\u4e3a MLEN1 AXI_BURST_INCR \u8868\u793a\u4f7f\u7528\u9012\u589e\u5f0f\u7a81\u53d1\u4f20\u8f93\uff0c\u4f20\u8f93 addr \uff0c addr + size \uff0c addr + (len - 1) * size \u4f4d\u7f6e\u7684\u5b57\u3002 CBus \u4e2d\u6709\u4e24\u4e2a\u63e1\u624b\u4fe1\u53f7 ready \u548c last \uff0c\u5206\u522b\u8868\u793a\u4e00\u4e2a\u5b57\u548c\u6574\u4e2a\u4e8b\u52a1\u7684\u63e1\u624b\u3002 \u8bfb\u8bf7\u6c42\uff1a \u5199\u8bf7\u6c42\uff1a","title":"\u603b\u7ebf(\u4e0b)"},{"location":"lab3/%E6%80%BB%E7%BA%BF/#_1","text":"\u5185\u5b58\u6bcf\u6b21\u5bfb\u5740\u7684\u5ef6\u8fdf\u5f88\u5927\uff0c\u4f46\u4e00\u6b21\u5bfb\u5740\u5f97\u5230\u7684\u6570\u636e\u5757\u901a\u5e38\u8fdc\u5927\u4e8e\u603b\u7ebf\u5bbd\u5ea6\u3002 \u5f15\u5165\u7a81\u53d1\u4f20\u8f93\u7684\u673a\u5236\uff0c\u5728\u4e00\u6b21\u8bbf\u5b58\u4e8b\u52a1\u4e2d\u4f20\u8f93\u8fde\u7eed\u7684\u591a\u4e2a\u5b57\u3002 \u7f13\u5b58\u603b\u7ebf\uff08Cache Bus, CBus\uff09\u501f\u9274\u4e86 AXI4 \uff0c\u7528\u4e8e\u652f\u6301\u7a81\u53d1\u4f20\u8f93\u3002 typedef struct packed { logic valid ; // in request? logic is_write ; // is it a write transaction? msize_t size ; // number of bytes in one burst addr_t addr ; // start address strobe_t strobe ; // which bytes are enabled? word_t data ; // the data to write mlen_t len ; // number of bursts axi_burst_type_t burst ; } cbus_req_t ; typedef struct packed { logic ready ; // is data arrived in this cycle? logic last ; // is it the last word? word_t data ; // the data from AXI bus } cbus_resp_t ; CBus \u6709\u4e09\u4e2a\u7528\u4e8e\u7a81\u53d1\u4f20\u8f93\u7684\u8bf7\u6c42\u4fe1\u53f7\uff1a size \u8868\u793a\u4e00\u4e2a\u5b57\u7684\u5927\u5c0f\uff0c\u9700\u8981\u5c0f\u4e8e\u7b49\u4e8e\u603b\u7ebf\u5bbd\u5ea6 len \u8868\u793a\u8fd9\u6b21\u7a81\u53d1\u4f20\u8f93\u4e2d\u5b57\u7684\u6570\u91cf burst \u8868\u793a\u7a81\u53d1\u4f20\u8f93\u7684\u6a21\u5f0f\uff0c\u6bd4\u5982 AXI_BURST_FIXED \uff0c AXI_BURST_INCR AXI_BURST_FIXED \u8868\u793a\u4e0d\u4f7f\u7528\u7a81\u53d1\u4f20\u8f93\uff0clen \u4e5f\u4e3a MLEN1 AXI_BURST_INCR \u8868\u793a\u4f7f\u7528\u9012\u589e\u5f0f\u7a81\u53d1\u4f20\u8f93\uff0c\u4f20\u8f93 addr \uff0c addr + size \uff0c addr + (len - 1) * size \u4f4d\u7f6e\u7684\u5b57\u3002 CBus \u4e2d\u6709\u4e24\u4e2a\u63e1\u624b\u4fe1\u53f7 ready \u548c last \uff0c\u5206\u522b\u8868\u793a\u4e00\u4e2a\u5b57\u548c\u6574\u4e2a\u4e8b\u52a1\u7684\u63e1\u624b\u3002 \u8bfb\u8bf7\u6c42\uff1a \u5199\u8bf7\u6c42\uff1a","title":"\u603b\u7ebf\uff08\u4e0b\uff09"}]}